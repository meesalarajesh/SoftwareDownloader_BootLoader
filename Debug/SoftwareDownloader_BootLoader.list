
SoftwareDownloader_BootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003670  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08003820  08003820  00013820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a00  08003a00  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08003a00  08003a00  00013a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a08  08003a08  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a08  08003a08  00013a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a0c  08003a0c  00013a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002804  20000078  08003a88  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000287c  08003a88  0002287c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009699  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b03  00000000  00000000  00029741  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000828  00000000  00000000  0002b248  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000750  00000000  00000000  0002ba70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022af9  00000000  00000000  0002c1c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000074a1  00000000  00000000  0004ecb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d0b7c  00000000  00000000  0005615a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00126cd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002320  00000000  00000000  00126d54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003808 	.word	0x08003808

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08003808 	.word	0x08003808

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fcb7 	bl	8000f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f919 	bl	80007e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f9e9 	bl	8000984 <MX_GPIO_Init>
  MX_CRC_Init();
 80005b2:	f000 f97f 	bl	80008b4 <MX_CRC_Init>
  MX_USART1_UART_Init();
 80005b6:	f000 f991 	bl	80008dc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80005ba:	f000 f9b9 	bl	8000930 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  memset(dataArray,0,10000);
 80005be:	f242 7210 	movw	r2, #10000	; 0x2710
 80005c2:	2100      	movs	r1, #0
 80005c4:	4860      	ldr	r0, [pc, #384]	; (8000748 <main+0x1a8>)
 80005c6:	f002 fd11 	bl	8002fec <memset>

  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 80005ca:	2101      	movs	r1, #1
 80005cc:	485f      	ldr	r0, [pc, #380]	; (800074c <main+0x1ac>)
 80005ce:	f001 fafd 	bl	8001bcc <HAL_GPIO_ReadPin>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	f040 80af 	bne.w	8000738 <main+0x198>
  {
	  printmsg("BootLoader Mode\r\n");
 80005da:	485d      	ldr	r0, [pc, #372]	; (8000750 <main+0x1b0>)
 80005dc:	f000 fa4e 	bl	8000a7c <printmsg>
	  uint32_t downloaderKey = calculateAuthenticationKEY(key);
 80005e0:	4b5c      	ldr	r3, [pc, #368]	; (8000754 <main+0x1b4>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fae3 	bl	8000bb0 <calculateAuthenticationKEY>
 80005ea:	60f8      	str	r0, [r7, #12]
	  uartDataTx[0] = key;
 80005ec:	4b59      	ldr	r3, [pc, #356]	; (8000754 <main+0x1b4>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a59      	ldr	r2, [pc, #356]	; (8000758 <main+0x1b8>)
 80005f2:	6013      	str	r3, [r2, #0]
	  printmsg("Waiting for Tester Connection");
 80005f4:	4859      	ldr	r0, [pc, #356]	; (800075c <main+0x1bc>)
 80005f6:	f000 fa41 	bl	8000a7c <printmsg>
	  uint32_t temp = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	603b      	str	r3, [r7, #0]
	  HAL_UART_Receive(&huart3, &temp, 4, HAL_MAX_DELAY);
 80005fe:	4639      	mov	r1, r7
 8000600:	f04f 33ff 	mov.w	r3, #4294967295
 8000604:	2204      	movs	r2, #4
 8000606:	4856      	ldr	r0, [pc, #344]	; (8000760 <main+0x1c0>)
 8000608:	f002 f85a 	bl	80026c0 <HAL_UART_Receive>
	  printmsg("Sending Authentication Key to Tester\r\n");
 800060c:	4855      	ldr	r0, [pc, #340]	; (8000764 <main+0x1c4>)
 800060e:	f000 fa35 	bl	8000a7c <printmsg>
	  HAL_Delay(1000);
 8000612:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000616:	f000 fcdd 	bl	8000fd4 <HAL_Delay>
	  HAL_UART_Transmit(&huart3, &uartDataTx[0], 4, HAL_MAX_DELAY);
 800061a:	f04f 33ff 	mov.w	r3, #4294967295
 800061e:	2204      	movs	r2, #4
 8000620:	494d      	ldr	r1, [pc, #308]	; (8000758 <main+0x1b8>)
 8000622:	484f      	ldr	r0, [pc, #316]	; (8000760 <main+0x1c0>)
 8000624:	f001 ffb3 	bl	800258e <HAL_UART_Transmit>
	  printmsg("Waiting for the Tester Key\r\n");
 8000628:	484f      	ldr	r0, [pc, #316]	; (8000768 <main+0x1c8>)
 800062a:	f000 fa27 	bl	8000a7c <printmsg>
	  HAL_UART_Receive(&huart3, &uartDataRx[0], 4, HAL_MAX_DELAY);
 800062e:	f04f 33ff 	mov.w	r3, #4294967295
 8000632:	2204      	movs	r2, #4
 8000634:	494d      	ldr	r1, [pc, #308]	; (800076c <main+0x1cc>)
 8000636:	484a      	ldr	r0, [pc, #296]	; (8000760 <main+0x1c0>)
 8000638:	f002 f842 	bl	80026c0 <HAL_UART_Receive>
	  if(uartDataRx[0] == downloaderKey)
 800063c:	4b4b      	ldr	r3, [pc, #300]	; (800076c <main+0x1cc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	68fa      	ldr	r2, [r7, #12]
 8000642:	429a      	cmp	r2, r3
 8000644:	d172      	bne.n	800072c <main+0x18c>
	  {
		  printmsg("Tester is verified successfully\r\n");
 8000646:	484a      	ldr	r0, [pc, #296]	; (8000770 <main+0x1d0>)
 8000648:	f000 fa18 	bl	8000a7c <printmsg>
		  uartDataTx[1] = 0xFFFFFFFF;
 800064c:	4b42      	ldr	r3, [pc, #264]	; (8000758 <main+0x1b8>)
 800064e:	f04f 32ff 	mov.w	r2, #4294967295
 8000652:	605a      	str	r2, [r3, #4]
		  HAL_Delay(1000);
 8000654:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000658:	f000 fcbc 	bl	8000fd4 <HAL_Delay>
		  HAL_UART_Transmit(&huart3, &uartDataTx[1], 4, HAL_MAX_DELAY);
 800065c:	f04f 33ff 	mov.w	r3, #4294967295
 8000660:	2204      	movs	r2, #4
 8000662:	4944      	ldr	r1, [pc, #272]	; (8000774 <main+0x1d4>)
 8000664:	483e      	ldr	r0, [pc, #248]	; (8000760 <main+0x1c0>)
 8000666:	f001 ff92 	bl	800258e <HAL_UART_Transmit>
		  printmsg("Verification msg sent");
 800066a:	4843      	ldr	r0, [pc, #268]	; (8000778 <main+0x1d8>)
 800066c:	f000 fa06 	bl	8000a7c <printmsg>
		  HAL_UART_Receive(&huart3, &uartDataRx[1], 8, HAL_MAX_DELAY);
 8000670:	f04f 33ff 	mov.w	r3, #4294967295
 8000674:	2208      	movs	r2, #8
 8000676:	4941      	ldr	r1, [pc, #260]	; (800077c <main+0x1dc>)
 8000678:	4839      	ldr	r0, [pc, #228]	; (8000760 <main+0x1c0>)
 800067a:	f002 f821 	bl	80026c0 <HAL_UART_Receive>
		  uint32_t payloadCRC = uartDataRx[1];
 800067e:	4b3b      	ldr	r3, [pc, #236]	; (800076c <main+0x1cc>)
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	60bb      	str	r3, [r7, #8]
		  payloadLen = uartDataRx[2];
 8000684:	4b39      	ldr	r3, [pc, #228]	; (800076c <main+0x1cc>)
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	4a3d      	ldr	r2, [pc, #244]	; (8000780 <main+0x1e0>)
 800068a:	6013      	str	r3, [r2, #0]
		  printmsg("CRC value and Payload Length received\r\n");
 800068c:	483d      	ldr	r0, [pc, #244]	; (8000784 <main+0x1e4>)
 800068e:	f000 f9f5 	bl	8000a7c <printmsg>
		  printmsg("Waiting for the payload\r\n");
 8000692:	483d      	ldr	r0, [pc, #244]	; (8000788 <main+0x1e8>)
 8000694:	f000 f9f2 	bl	8000a7c <printmsg>
		  HAL_UART_Receive(&huart3, dataArray, payloadLen, HAL_MAX_DELAY);
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <main+0x1e0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	b29a      	uxth	r2, r3
 800069e:	f04f 33ff 	mov.w	r3, #4294967295
 80006a2:	4929      	ldr	r1, [pc, #164]	; (8000748 <main+0x1a8>)
 80006a4:	482e      	ldr	r0, [pc, #184]	; (8000760 <main+0x1c0>)
 80006a6:	f002 f80b 	bl	80026c0 <HAL_UART_Receive>
		  //uint32_t crc_Value = HAL_CRC_Accumulate(&hcrc, &dataArray, payloadLen);
		  if(!bootloader_verify_crc(&dataArray, payloadLen, payloadCRC))
 80006aa:	4b35      	ldr	r3, [pc, #212]	; (8000780 <main+0x1e0>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	4619      	mov	r1, r3
 80006b2:	4825      	ldr	r0, [pc, #148]	; (8000748 <main+0x1a8>)
 80006b4:	f000 fa8e 	bl	8000bd4 <bootloader_verify_crc>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d130      	bne.n	8000720 <main+0x180>
		  {
			  printmsg("CRC is matched\r\n");
 80006be:	4833      	ldr	r0, [pc, #204]	; (800078c <main+0x1ec>)
 80006c0:	f000 f9dc 	bl	8000a7c <printmsg>
			  printmsg("Data is being written\r\n");
 80006c4:	4832      	ldr	r0, [pc, #200]	; (8000790 <main+0x1f0>)
 80006c6:	f000 f9d9 	bl	8000a7c <printmsg>
			  uint8_t statusWrite = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	71fb      	strb	r3, [r7, #7]
			  uint8_t statusErase = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	71bb      	strb	r3, [r7, #6]
			  statusErase = execute_flash_erase(6, 1);
 80006d2:	2101      	movs	r1, #1
 80006d4:	2006      	movs	r0, #6
 80006d6:	f000 fa23 	bl	8000b20 <execute_flash_erase>
 80006da:	4603      	mov	r3, r0
 80006dc:	71bb      	strb	r3, [r7, #6]
			  statusWrite = execute_mem_write(dataArray, pBuffer, payloadLen);
 80006de:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <main+0x1f4>)
 80006e0:	6819      	ldr	r1, [r3, #0]
 80006e2:	4b27      	ldr	r3, [pc, #156]	; (8000780 <main+0x1e0>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	461a      	mov	r2, r3
 80006e8:	4817      	ldr	r0, [pc, #92]	; (8000748 <main+0x1a8>)
 80006ea:	f000 f9ed 	bl	8000ac8 <execute_mem_write>
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
			  if(statusWrite == HAL_OK)
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d109      	bne.n	800070c <main+0x16c>
			  {
				  printmsg("data is written successfully\r\n");
 80006f8:	4827      	ldr	r0, [pc, #156]	; (8000798 <main+0x1f8>)
 80006fa:	f000 f9bf 	bl	8000a7c <printmsg>
				  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 80006fe:	2201      	movs	r2, #1
 8000700:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000704:	4825      	ldr	r0, [pc, #148]	; (800079c <main+0x1fc>)
 8000706:	f001 fa79 	bl	8001bfc <HAL_GPIO_WritePin>
 800070a:	e017      	b.n	800073c <main+0x19c>
			  }
			  else
			  {
				  printmsg("Data writing is failed\r\n");
 800070c:	4824      	ldr	r0, [pc, #144]	; (80007a0 <main+0x200>)
 800070e:	f000 f9b5 	bl	8000a7c <printmsg>
				  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000718:	4820      	ldr	r0, [pc, #128]	; (800079c <main+0x1fc>)
 800071a:	f001 fa6f 	bl	8001bfc <HAL_GPIO_WritePin>
 800071e:	e00d      	b.n	800073c <main+0x19c>
			  }
		  }
		  else
		  {
			  printmsg("CRC is mis-matched\r\n");
 8000720:	4820      	ldr	r0, [pc, #128]	; (80007a4 <main+0x204>)
 8000722:	f000 f9ab 	bl	8000a7c <printmsg>
			  userApplication();
 8000726:	f000 f841 	bl	80007ac <userApplication>
 800072a:	e007      	b.n	800073c <main+0x19c>
		  }

	  }
	  else
	  {
		  printmsg("Unknown Tester Found\r\n");
 800072c:	481e      	ldr	r0, [pc, #120]	; (80007a8 <main+0x208>)
 800072e:	f000 f9a5 	bl	8000a7c <printmsg>
		  userApplication();
 8000732:	f000 f83b 	bl	80007ac <userApplication>
 8000736:	e001      	b.n	800073c <main+0x19c>

	  }
  }
 else
 {
	 userApplication();
 8000738:	f000 f838 	bl	80007ac <userApplication>
 800073c:	2300      	movs	r3, #0
 }
}
 800073e:	4618      	mov	r0, r3
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200000fc 	.word	0x200000fc
 800074c:	40020000 	.word	0x40020000
 8000750:	08003820 	.word	0x08003820
 8000754:	20000004 	.word	0x20000004
 8000758:	200000a0 	.word	0x200000a0
 800075c:	08003834 	.word	0x08003834
 8000760:	200000bc 	.word	0x200000bc
 8000764:	08003854 	.word	0x08003854
 8000768:	0800387c 	.word	0x0800387c
 800076c:	20000094 	.word	0x20000094
 8000770:	0800389c 	.word	0x0800389c
 8000774:	200000a4 	.word	0x200000a4
 8000778:	080038c0 	.word	0x080038c0
 800077c:	20000098 	.word	0x20000098
 8000780:	200000ac 	.word	0x200000ac
 8000784:	080038d8 	.word	0x080038d8
 8000788:	08003900 	.word	0x08003900
 800078c:	0800391c 	.word	0x0800391c
 8000790:	08003930 	.word	0x08003930
 8000794:	20000000 	.word	0x20000000
 8000798:	08003948 	.word	0x08003948
 800079c:	40021800 	.word	0x40021800
 80007a0:	08003968 	.word	0x08003968
 80007a4:	08003984 	.word	0x08003984
 80007a8:	0800399c 	.word	0x0800399c

080007ac <userApplication>:
void userApplication(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0

	//printmsg("BL_DEBUG_MSG:bootloader_jump_to_user_app\n");


	// 1. configure the MSP by reading the value from the base address of the sector 2
	uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR6_BASE_ADDRESS;
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <userApplication+0x2c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	f383 8808 	msr	MSP, r3
	//SCB->VTOR = FLASH_SECTOR1_BASE_ADDRESS;

	/* 2. Now fetch the reset handler address of the user application
	 * from the location FLASH_SECTOR2_BASE_ADDRESS+4
	 */
	uint32_t resethandler_address = *(volatile uint32_t *) (FLASH_SECTOR6_BASE_ADDRESS + 4);
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <userApplication+0x30>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	60bb      	str	r3, [r7, #8]

	app_reset_handler = (void*) resethandler_address;
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	607b      	str	r3, [r7, #4]

	//printmsg("BL_DEBUG_MSG: app reset handler addr : %#x\n",app_reset_handler);

	//3. jump to reset handler of the user application
	app_reset_handler();
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4798      	blx	r3

}
 80007d0:	bf00      	nop
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	08040000 	.word	0x08040000
 80007dc:	08040004 	.word	0x08040004

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b094      	sub	sp, #80	; 0x50
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0320 	add.w	r3, r7, #32
 80007ea:	2230      	movs	r2, #48	; 0x30
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f002 fbfc 	bl	8002fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	4b28      	ldr	r3, [pc, #160]	; (80008ac <SystemClock_Config+0xcc>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	4a27      	ldr	r2, [pc, #156]	; (80008ac <SystemClock_Config+0xcc>)
 800080e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000812:	6413      	str	r3, [r2, #64]	; 0x40
 8000814:	4b25      	ldr	r3, [pc, #148]	; (80008ac <SystemClock_Config+0xcc>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000820:	2300      	movs	r3, #0
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <SystemClock_Config+0xd0>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800082c:	4a20      	ldr	r2, [pc, #128]	; (80008b0 <SystemClock_Config+0xd0>)
 800082e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000832:	6013      	str	r3, [r2, #0]
 8000834:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <SystemClock_Config+0xd0>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000840:	2301      	movs	r3, #1
 8000842:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000844:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084a:	2302      	movs	r3, #2
 800084c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800084e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000852:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000854:	2304      	movs	r3, #4
 8000856:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000858:	2354      	movs	r3, #84	; 0x54
 800085a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800085c:	2302      	movs	r3, #2
 800085e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000860:	2303      	movs	r3, #3
 8000862:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000864:	f107 0320 	add.w	r3, r7, #32
 8000868:	4618      	mov	r0, r3
 800086a:	f001 f9e1 	bl	8001c30 <HAL_RCC_OscConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000874:	f000 f9e2 	bl	8000c3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000878:	230f      	movs	r3, #15
 800087a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087c:	2302      	movs	r3, #2
 800087e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000888:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	2102      	movs	r1, #2
 8000894:	4618      	mov	r0, r3
 8000896:	f001 fc3b 	bl	8002110 <HAL_RCC_ClockConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008a0:	f000 f9cc 	bl	8000c3c <Error_Handler>
  }
}
 80008a4:	bf00      	nop
 80008a6:	3750      	adds	r7, #80	; 0x50
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40007000 	.word	0x40007000

080008b4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_CRC_Init+0x20>)
 80008ba:	4a07      	ldr	r2, [pc, #28]	; (80008d8 <MX_CRC_Init+0x24>)
 80008bc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_CRC_Init+0x20>)
 80008c0:	f000 fc8f 	bl	80011e2 <HAL_CRC_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80008ca:	f000 f9b7 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	2000280c 	.word	0x2000280c
 80008d8:	40023000 	.word	0x40023000

080008dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_USART1_UART_Init+0x4c>)
 80008e2:	4a12      	ldr	r2, [pc, #72]	; (800092c <MX_USART1_UART_Init+0x50>)
 80008e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <MX_USART1_UART_Init+0x4c>)
 80008e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_USART1_UART_Init+0x4c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_USART1_UART_Init+0x4c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <MX_USART1_UART_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_USART1_UART_Init+0x4c>)
 8000902:	220c      	movs	r2, #12
 8000904:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <MX_USART1_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_USART1_UART_Init+0x4c>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_USART1_UART_Init+0x4c>)
 8000914:	f001 fdee 	bl	80024f4 <HAL_UART_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800091e:	f000 f98d 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20002814 	.word	0x20002814
 800092c:	40011000 	.word	0x40011000

08000930 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_USART3_UART_Init+0x4c>)
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <MX_USART3_UART_Init+0x50>)
 8000938:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <MX_USART3_UART_Init+0x4c>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_USART3_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_USART3_UART_Init+0x4c>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <MX_USART3_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_USART3_UART_Init+0x4c>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <MX_USART3_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_USART3_UART_Init+0x4c>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_USART3_UART_Init+0x4c>)
 8000968:	f001 fdc4 	bl	80024f4 <HAL_UART_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000972:	f000 f963 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200000bc 	.word	0x200000bc
 8000980:	40004800 	.word	0x40004800

08000984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b34      	ldr	r3, [pc, #208]	; (8000a70 <MX_GPIO_Init+0xec>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a33      	ldr	r2, [pc, #204]	; (8000a70 <MX_GPIO_Init+0xec>)
 80009a4:	f043 0304 	orr.w	r3, r3, #4
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b31      	ldr	r3, [pc, #196]	; (8000a70 <MX_GPIO_Init+0xec>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0304 	and.w	r3, r3, #4
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b2d      	ldr	r3, [pc, #180]	; (8000a70 <MX_GPIO_Init+0xec>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a2c      	ldr	r2, [pc, #176]	; (8000a70 <MX_GPIO_Init+0xec>)
 80009c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b2a      	ldr	r3, [pc, #168]	; (8000a70 <MX_GPIO_Init+0xec>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	4b26      	ldr	r3, [pc, #152]	; (8000a70 <MX_GPIO_Init+0xec>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a25      	ldr	r2, [pc, #148]	; (8000a70 <MX_GPIO_Init+0xec>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b23      	ldr	r3, [pc, #140]	; (8000a70 <MX_GPIO_Init+0xec>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <MX_GPIO_Init+0xec>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a1e      	ldr	r2, [pc, #120]	; (8000a70 <MX_GPIO_Init+0xec>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <MX_GPIO_Init+0xec>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_GPIO_Init+0xec>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a17      	ldr	r2, [pc, #92]	; (8000a70 <MX_GPIO_Init+0xec>)
 8000a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <MX_GPIO_Init+0xec>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000a2c:	4811      	ldr	r0, [pc, #68]	; (8000a74 <MX_GPIO_Init+0xf0>)
 8000a2e:	f001 f8e5 	bl	8001bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a32:	2301      	movs	r3, #1
 8000a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	480c      	ldr	r0, [pc, #48]	; (8000a78 <MX_GPIO_Init+0xf4>)
 8000a46:	f000 ff17 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000a4a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	4804      	ldr	r0, [pc, #16]	; (8000a74 <MX_GPIO_Init+0xf0>)
 8000a64:	f000 ff08 	bl	8001878 <HAL_GPIO_Init>

}
 8000a68:	bf00      	nop
 8000a6a:	3728      	adds	r7, #40	; 0x28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40021800 	.word	0x40021800
 8000a78:	40020000 	.word	0x40020000

08000a7c <printmsg>:

/* USER CODE BEGIN 4 */
/* prints formatted string to console over UART */
void printmsg(char *format,...)
 {
 8000a7c:	b40f      	push	{r0, r1, r2, r3}
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b096      	sub	sp, #88	; 0x58
 8000a82:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN
	char str[80];
	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 8000a84:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a88:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 8000a8a:	f107 0308 	add.w	r3, r7, #8
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000a92:	4618      	mov	r0, r3
 8000a94:	f002 fac8 	bl	8003028 <vsiprintf>
	HAL_UART_Transmit(D_UART,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 8000a98:	f107 0308 	add.w	r3, r7, #8
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fba7 	bl	80001f0 <strlen>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	f107 0108 	add.w	r1, r7, #8
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <printmsg+0x48>)
 8000ab0:	f001 fd6d 	bl	800258e <HAL_UART_Transmit>
	va_end(args);
#endif
 }
 8000ab4:	bf00      	nop
 8000ab6:	3758      	adds	r7, #88	; 0x58
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000abe:	b004      	add	sp, #16
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20002814 	.word	0x20002814

08000ac8 <execute_mem_write>:
uint32_t bytes_to_word(uint32_t *dest, uint8_t *src)
{
	memcpy(dest, &src, sizeof(dest));
}
uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
{
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b087      	sub	sp, #28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
	uint8_t status = HAL_OK;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	75fb      	strb	r3, [r7, #23]

	//We have to unlock flash module to get control of registers
	HAL_FLASH_Unlock();
 8000ad8:	f000 fc1e 	bl	8001318 <HAL_FLASH_Unlock>

	for(uint32_t i = 0 ; i <len ; i++)
 8000adc:	2300      	movs	r3, #0
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	e013      	b.n	8000b0a <execute_mem_write+0x42>
	{
		//Here we program the flash byte by byte
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,mem_address+i,pBuffer[i] );
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	18d1      	adds	r1, r2, r3
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	4413      	add	r3, r2
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	f04f 0400 	mov.w	r4, #0
 8000af6:	461a      	mov	r2, r3
 8000af8:	4623      	mov	r3, r4
 8000afa:	2000      	movs	r0, #0
 8000afc:	f000 fbb8 	bl	8001270 <HAL_FLASH_Program>
 8000b00:	4603      	mov	r3, r0
 8000b02:	75fb      	strb	r3, [r7, #23]
	for(uint32_t i = 0 ; i <len ; i++)
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	3301      	adds	r3, #1
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d3e7      	bcc.n	8000ae2 <execute_mem_write+0x1a>
	}
	HAL_FLASH_Lock();
 8000b12:	f000 fc23 	bl	800135c <HAL_FLASH_Lock>

	return status;
 8000b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	371c      	adds	r7, #28
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd90      	pop	{r4, r7, pc}

08000b20 <execute_flash_erase>:

uint8_t execute_flash_erase(uint8_t sector_number , uint8_t number_of_sector)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	460a      	mov	r2, r1
 8000b2a:	71fb      	strb	r3, [r7, #7]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	71bb      	strb	r3, [r7, #6]
	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t sectorError;
	HAL_StatusTypeDef status;


	if( number_of_sector > 12 )
 8000b30:	79bb      	ldrb	r3, [r7, #6]
 8000b32:	2b0c      	cmp	r3, #12
 8000b34:	d901      	bls.n	8000b3a <execute_flash_erase+0x1a>
		return INVALID_SECTOR;
 8000b36:	2304      	movs	r3, #4
 8000b38:	e035      	b.n	8000ba6 <execute_flash_erase+0x86>

	if( (sector_number == 0xff ) || (sector_number <= 11) )
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	2bff      	cmp	r3, #255	; 0xff
 8000b3e:	d002      	beq.n	8000b46 <execute_flash_erase+0x26>
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	2b0b      	cmp	r3, #11
 8000b44:	d82e      	bhi.n	8000ba4 <execute_flash_erase+0x84>
	{
		if(sector_number == (uint8_t) 0xff)
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	2bff      	cmp	r3, #255	; 0xff
 8000b4a:	d102      	bne.n	8000b52 <execute_flash_erase+0x32>
		{
			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	e012      	b.n	8000b78 <execute_flash_erase+0x58>
		}else
		{
		    /*Here we are just calculating how many sectors needs to erased */
			uint8_t remanining_sector = 12 - sector_number;
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	f1c3 030c 	rsb	r3, r3, #12
 8000b58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           if( number_of_sector > remanining_sector)
 8000b5c:	79ba      	ldrb	r2, [r7, #6]
 8000b5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d902      	bls.n	8000b6c <execute_flash_erase+0x4c>
           {
           	number_of_sector = remanining_sector;
 8000b66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b6a:	71bb      	strb	r3, [r7, #6]
           }
			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	613b      	str	r3, [r7, #16]
			flashErase_handle.Sector = sector_number; // this is the initial sector
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	61bb      	str	r3, [r7, #24]
			flashErase_handle.NbSectors = number_of_sector;
 8000b74:	79bb      	ldrb	r3, [r7, #6]
 8000b76:	61fb      	str	r3, [r7, #28]
		}
		flashErase_handle.Banks = FLASH_BANK_1;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	617b      	str	r3, [r7, #20]

		/*Get access to touch the flash registers */
		HAL_FLASH_Unlock();
 8000b7c:	f000 fbcc 	bl	8001318 <HAL_FLASH_Unlock>
		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3;  // our mcu will work on this voltage range
 8000b80:	2302      	movs	r3, #2
 8000b82:	623b      	str	r3, [r7, #32]
		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 8000b84:	f107 020c 	add.w	r2, r7, #12
 8000b88:	f107 0310 	add.w	r3, r7, #16
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 fd32 	bl	80015f8 <HAL_FLASHEx_Erase>
 8000b94:	4603      	mov	r3, r0
 8000b96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		HAL_FLASH_Lock();
 8000b9a:	f000 fbdf 	bl	800135c <HAL_FLASH_Lock>

		return status;
 8000b9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ba2:	e000      	b.n	8000ba6 <execute_flash_erase+0x86>
	}


	return INVALID_SECTOR;
 8000ba4:	2304      	movs	r3, #4
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3728      	adds	r7, #40	; 0x28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <calculateAuthenticationKEY>:
uint32_t calculateAuthenticationKEY(uint32_t key)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	uint32_t returnValue = key ^ 0xAABBCCDD;
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <calculateAuthenticationKEY+0x20>)
 8000bbc:	4053      	eors	r3, r2
 8000bbe:	60fb      	str	r3, [r7, #12]
	return returnValue;
 8000bc0:	68fb      	ldr	r3, [r7, #12]

}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	aabbccdd 	.word	0xaabbccdd

08000bd4 <bootloader_verify_crc>:
uint8_t bootloader_verify_crc (uint8_t *pData, uint32_t len, uint32_t crc_host)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
    uint32_t uwCRCValue=0xff;
 8000be0:	23ff      	movs	r3, #255	; 0xff
 8000be2:	61fb      	str	r3, [r7, #28]

    for (uint32_t i=0 ; i < len ; i++)
 8000be4:	2300      	movs	r3, #0
 8000be6:	61bb      	str	r3, [r7, #24]
 8000be8:	e00f      	b.n	8000c0a <bootloader_verify_crc+0x36>
	{
        uint32_t i_data = pData[i];
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	4413      	add	r3, r2
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	617b      	str	r3, [r7, #20]
        uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480e      	ldr	r0, [pc, #56]	; (8000c38 <bootloader_verify_crc+0x64>)
 8000bfe:	f000 fb0c 	bl	800121a <HAL_CRC_Accumulate>
 8000c02:	61f8      	str	r0, [r7, #28]
    for (uint32_t i=0 ; i < len ; i++)
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	3301      	adds	r3, #1
 8000c08:	61bb      	str	r3, [r7, #24]
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d3eb      	bcc.n	8000bea <bootloader_verify_crc+0x16>
	}

	 /* Reset CRC Calculation Unit */
  __HAL_CRC_DR_RESET(&hcrc);
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <bootloader_verify_crc+0x64>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	689a      	ldr	r2, [r3, #8]
 8000c18:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <bootloader_verify_crc+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f042 0201 	orr.w	r2, r2, #1
 8000c20:	609a      	str	r2, [r3, #8]

	if( uwCRCValue == crc_host)
 8000c22:	69fa      	ldr	r2, [r7, #28]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d101      	bne.n	8000c2e <bootloader_verify_crc+0x5a>
	{
		return VERIFY_CRC_SUCCESS;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	e000      	b.n	8000c30 <bootloader_verify_crc+0x5c>
	}

	return VERIFY_CRC_FAIL;
 8000c2e:	2301      	movs	r3, #1
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3720      	adds	r7, #32
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	2000280c 	.word	0x2000280c

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
	...

08000c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_MspInit+0x54>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	4a11      	ldr	r2, [pc, #68]	; (8000ca0 <HAL_MspInit+0x54>)
 8000c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c60:	6453      	str	r3, [r2, #68]	; 0x44
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <HAL_MspInit+0x54>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	603b      	str	r3, [r7, #0]
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <HAL_MspInit+0x54>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <HAL_MspInit+0x54>)
 8000c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <HAL_MspInit+0x54>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	210f      	movs	r1, #15
 8000c8e:	f06f 0001 	mvn.w	r0, #1
 8000c92:	f000 fa7e 	bl	8001192 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40023800 	.word	0x40023800

08000ca4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_CRC_MspInit+0x3c>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d10d      	bne.n	8000cd2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <HAL_CRC_MspInit+0x40>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a09      	ldr	r2, [pc, #36]	; (8000ce4 <HAL_CRC_MspInit+0x40>)
 8000cc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <HAL_CRC_MspInit+0x40>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000cd2:	bf00      	nop
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	40023000 	.word	0x40023000
 8000ce4:	40023800 	.word	0x40023800

08000ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08c      	sub	sp, #48	; 0x30
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 031c 	add.w	r3, r7, #28
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a33      	ldr	r2, [pc, #204]	; (8000dd4 <HAL_UART_MspInit+0xec>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d12d      	bne.n	8000d66 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61bb      	str	r3, [r7, #24]
 8000d0e:	4b32      	ldr	r3, [pc, #200]	; (8000dd8 <HAL_UART_MspInit+0xf0>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	4a31      	ldr	r2, [pc, #196]	; (8000dd8 <HAL_UART_MspInit+0xf0>)
 8000d14:	f043 0310 	orr.w	r3, r3, #16
 8000d18:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1a:	4b2f      	ldr	r3, [pc, #188]	; (8000dd8 <HAL_UART_MspInit+0xf0>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	f003 0310 	and.w	r3, r3, #16
 8000d22:	61bb      	str	r3, [r7, #24]
 8000d24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	4b2b      	ldr	r3, [pc, #172]	; (8000dd8 <HAL_UART_MspInit+0xf0>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a2a      	ldr	r2, [pc, #168]	; (8000dd8 <HAL_UART_MspInit+0xf0>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <HAL_UART_MspInit+0xf0>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d42:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d50:	2303      	movs	r3, #3
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d54:	2307      	movs	r3, #7
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	481f      	ldr	r0, [pc, #124]	; (8000ddc <HAL_UART_MspInit+0xf4>)
 8000d60:	f000 fd8a 	bl	8001878 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d64:	e031      	b.n	8000dca <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a1d      	ldr	r2, [pc, #116]	; (8000de0 <HAL_UART_MspInit+0xf8>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d12c      	bne.n	8000dca <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d70:	2300      	movs	r3, #0
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <HAL_UART_MspInit+0xf0>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	4a17      	ldr	r2, [pc, #92]	; (8000dd8 <HAL_UART_MspInit+0xf0>)
 8000d7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d80:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <HAL_UART_MspInit+0xf0>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <HAL_UART_MspInit+0xf0>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	4a10      	ldr	r2, [pc, #64]	; (8000dd8 <HAL_UART_MspInit+0xf0>)
 8000d96:	f043 0302 	orr.w	r3, r3, #2
 8000d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <HAL_UART_MspInit+0xf0>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	f003 0302 	and.w	r3, r3, #2
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000da8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db6:	2303      	movs	r3, #3
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dba:	2307      	movs	r3, #7
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4807      	ldr	r0, [pc, #28]	; (8000de4 <HAL_UART_MspInit+0xfc>)
 8000dc6:	f000 fd57 	bl	8001878 <HAL_GPIO_Init>
}
 8000dca:	bf00      	nop
 8000dcc:	3730      	adds	r7, #48	; 0x30
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40011000 	.word	0x40011000
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020000 	.word	0x40020000
 8000de0:	40004800 	.word	0x40004800
 8000de4:	40020400 	.word	0x40020400

08000de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <HardFault_Handler+0x4>

08000dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <MemManage_Handler+0x4>

08000e02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e34:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <_sbrk+0x5c>)
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <_sbrk+0x60>)
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e40:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <_sbrk+0x64>)
 8000e4a:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <_sbrk+0x68>)
 8000e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <_sbrk+0x64>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d207      	bcs.n	8000e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e5c:	f002 f89c 	bl	8002f98 <__errno>
 8000e60:	4602      	mov	r2, r0
 8000e62:	230c      	movs	r3, #12
 8000e64:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6a:	e009      	b.n	8000e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e72:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <_sbrk+0x64>)
 8000e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20030000 	.word	0x20030000
 8000e8c:	00000400 	.word	0x00000400
 8000e90:	200000b0 	.word	0x200000b0
 8000e94:	20002880 	.word	0x20002880

08000e98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <SystemInit+0x28>)
 8000e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ea2:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <SystemInit+0x28>)
 8000ea4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <SystemInit+0x28>)
 8000eae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eb2:	609a      	str	r2, [r3, #8]
#endif
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000efc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ec8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000eca:	e003      	b.n	8000ed4 <LoopCopyDataInit>

08000ecc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ece:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ed0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ed2:	3104      	adds	r1, #4

08000ed4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ed4:	480b      	ldr	r0, [pc, #44]	; (8000f04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ed8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000eda:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000edc:	d3f6      	bcc.n	8000ecc <CopyDataInit>
  ldr  r2, =_sbss
 8000ede:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ee0:	e002      	b.n	8000ee8 <LoopFillZerobss>

08000ee2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ee2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ee4:	f842 3b04 	str.w	r3, [r2], #4

08000ee8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000eea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000eec:	d3f9      	bcc.n	8000ee2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000eee:	f7ff ffd3 	bl	8000e98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef2:	f002 f857 	bl	8002fa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ef6:	f7ff fb53 	bl	80005a0 <main>
  bx  lr    
 8000efa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000efc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000f00:	08003a10 	.word	0x08003a10
  ldr  r0, =_sdata
 8000f04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f08:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000f0c:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000f10:	2000287c 	.word	0x2000287c

08000f14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f14:	e7fe      	b.n	8000f14 <ADC_IRQHandler>
	...

08000f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0d      	ldr	r2, [pc, #52]	; (8000f58 <HAL_Init+0x40>)
 8000f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f28:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <HAL_Init+0x40>)
 8000f2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <HAL_Init+0x40>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <HAL_Init+0x40>)
 8000f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f40:	2003      	movs	r0, #3
 8000f42:	f000 f91b 	bl	800117c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f46:	200f      	movs	r0, #15
 8000f48:	f000 f808 	bl	8000f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4c:	f7ff fe7e 	bl	8000c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40023c00 	.word	0x40023c00

08000f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_InitTick+0x54>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_InitTick+0x58>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 f925 	bl	80011ca <HAL_SYSTICK_Config>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00e      	b.n	8000fa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b0f      	cmp	r3, #15
 8000f8e:	d80a      	bhi.n	8000fa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f90:	2200      	movs	r2, #0
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295
 8000f98:	f000 f8fb 	bl	8001192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f9c:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <HAL_InitTick+0x5c>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e000      	b.n	8000fa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000008 	.word	0x20000008
 8000fb4:	20000010 	.word	0x20000010
 8000fb8:	2000000c 	.word	0x2000000c

08000fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <HAL_GetTick+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20002854 	.word	0x20002854

08000fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fdc:	f7ff ffee 	bl	8000fbc <HAL_GetTick>
 8000fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fec:	d005      	beq.n	8000ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <HAL_Delay+0x40>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ffa:	bf00      	nop
 8000ffc:	f7ff ffde 	bl	8000fbc <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	429a      	cmp	r2, r3
 800100a:	d8f7      	bhi.n	8000ffc <HAL_Delay+0x28>
  {
  }
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000010 	.word	0x20000010

08001018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001034:	4013      	ands	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104a:	4a04      	ldr	r2, [pc, #16]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	60d3      	str	r3, [r2, #12]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <__NVIC_GetPriorityGrouping+0x18>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	f003 0307 	and.w	r3, r3, #7
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	2b00      	cmp	r3, #0
 800108e:	db0a      	blt.n	80010a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	b2da      	uxtb	r2, r3
 8001094:	490c      	ldr	r1, [pc, #48]	; (80010c8 <__NVIC_SetPriority+0x4c>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	0112      	lsls	r2, r2, #4
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	440b      	add	r3, r1
 80010a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a4:	e00a      	b.n	80010bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4908      	ldr	r1, [pc, #32]	; (80010cc <__NVIC_SetPriority+0x50>)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	3b04      	subs	r3, #4
 80010b4:	0112      	lsls	r2, r2, #4
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	440b      	add	r3, r1
 80010ba:	761a      	strb	r2, [r3, #24]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000e100 	.word	0xe000e100
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	; 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f1c3 0307 	rsb	r3, r3, #7
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	bf28      	it	cs
 80010ee:	2304      	movcs	r3, #4
 80010f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3304      	adds	r3, #4
 80010f6:	2b06      	cmp	r3, #6
 80010f8:	d902      	bls.n	8001100 <NVIC_EncodePriority+0x30>
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3b03      	subs	r3, #3
 80010fe:	e000      	b.n	8001102 <NVIC_EncodePriority+0x32>
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	f04f 32ff 	mov.w	r2, #4294967295
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43da      	mvns	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	401a      	ands	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001118:	f04f 31ff 	mov.w	r1, #4294967295
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	43d9      	mvns	r1, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	4313      	orrs	r3, r2
         );
}
 800112a:	4618      	mov	r0, r3
 800112c:	3724      	adds	r7, #36	; 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001148:	d301      	bcc.n	800114e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114a:	2301      	movs	r3, #1
 800114c:	e00f      	b.n	800116e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <SysTick_Config+0x40>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001156:	210f      	movs	r1, #15
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f7ff ff8e 	bl	800107c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <SysTick_Config+0x40>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <SysTick_Config+0x40>)
 8001168:	2207      	movs	r2, #7
 800116a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	e000e010 	.word	0xe000e010

0800117c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff47 	bl	8001018 <__NVIC_SetPriorityGrouping>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001192:	b580      	push	{r7, lr}
 8001194:	b086      	sub	sp, #24
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a4:	f7ff ff5c 	bl	8001060 <__NVIC_GetPriorityGrouping>
 80011a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f7ff ff8e 	bl	80010d0 <NVIC_EncodePriority>
 80011b4:	4602      	mov	r2, r0
 80011b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff5d 	bl	800107c <__NVIC_SetPriority>
}
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ffb0 	bl	8001138 <SysTick_Config>
 80011d8:	4603      	mov	r3, r0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d101      	bne.n	80011f4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e00e      	b.n	8001212 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	795b      	ldrb	r3, [r3, #5]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d105      	bne.n	800120a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff fd4d 	bl	8000ca4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2201      	movs	r2, #1
 800120e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800121a:	b480      	push	{r7}
 800121c:	b087      	sub	sp, #28
 800121e:	af00      	add	r7, sp, #0
 8001220:	60f8      	str	r0, [r7, #12]
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2202      	movs	r2, #2
 800122e:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	e00a      	b.n	800124c <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	441a      	add	r2, r3
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6812      	ldr	r2, [r2, #0]
 8001244:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	3301      	adds	r3, #1
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	429a      	cmp	r2, r3
 8001252:	d3f0      	bcc.n	8001236 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2201      	movs	r2, #1
 8001260:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001262:	693b      	ldr	r3, [r7, #16]
}
 8001264:	4618      	mov	r0, r3
 8001266:	371c      	adds	r7, #28
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001282:	4b23      	ldr	r3, [pc, #140]	; (8001310 <HAL_FLASH_Program+0xa0>)
 8001284:	7e1b      	ldrb	r3, [r3, #24]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d101      	bne.n	800128e <HAL_FLASH_Program+0x1e>
 800128a:	2302      	movs	r3, #2
 800128c:	e03b      	b.n	8001306 <HAL_FLASH_Program+0x96>
 800128e:	4b20      	ldr	r3, [pc, #128]	; (8001310 <HAL_FLASH_Program+0xa0>)
 8001290:	2201      	movs	r2, #1
 8001292:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001294:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001298:	f000 f870 	bl	800137c <FLASH_WaitForLastOperation>
 800129c:	4603      	mov	r3, r0
 800129e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80012a0:	7dfb      	ldrb	r3, [r7, #23]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d12b      	bne.n	80012fe <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d105      	bne.n	80012b8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80012ac:	783b      	ldrb	r3, [r7, #0]
 80012ae:	4619      	mov	r1, r3
 80012b0:	68b8      	ldr	r0, [r7, #8]
 80012b2:	f000 f919 	bl	80014e8 <FLASH_Program_Byte>
 80012b6:	e016      	b.n	80012e6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d105      	bne.n	80012ca <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80012be:	883b      	ldrh	r3, [r7, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	68b8      	ldr	r0, [r7, #8]
 80012c4:	f000 f8ec 	bl	80014a0 <FLASH_Program_HalfWord>
 80012c8:	e00d      	b.n	80012e6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d105      	bne.n	80012dc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	4619      	mov	r1, r3
 80012d4:	68b8      	ldr	r0, [r7, #8]
 80012d6:	f000 f8c1 	bl	800145c <FLASH_Program_Word>
 80012da:	e004      	b.n	80012e6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80012dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012e0:	68b8      	ldr	r0, [r7, #8]
 80012e2:	f000 f88b 	bl	80013fc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012e6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012ea:	f000 f847 	bl	800137c <FLASH_WaitForLastOperation>
 80012ee:	4603      	mov	r3, r0
 80012f0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <HAL_FLASH_Program+0xa4>)
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	4a07      	ldr	r2, [pc, #28]	; (8001314 <HAL_FLASH_Program+0xa4>)
 80012f8:	f023 0301 	bic.w	r3, r3, #1
 80012fc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80012fe:	4b04      	ldr	r3, [pc, #16]	; (8001310 <HAL_FLASH_Program+0xa0>)
 8001300:	2200      	movs	r2, #0
 8001302:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001304:	7dfb      	ldrb	r3, [r7, #23]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20002858 	.word	0x20002858
 8001314:	40023c00 	.word	0x40023c00

08001318 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <HAL_FLASH_Unlock+0x38>)
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	2b00      	cmp	r3, #0
 8001328:	da0b      	bge.n	8001342 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <HAL_FLASH_Unlock+0x38>)
 800132c:	4a09      	ldr	r2, [pc, #36]	; (8001354 <HAL_FLASH_Unlock+0x3c>)
 800132e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <HAL_FLASH_Unlock+0x38>)
 8001332:	4a09      	ldr	r2, [pc, #36]	; (8001358 <HAL_FLASH_Unlock+0x40>)
 8001334:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_FLASH_Unlock+0x38>)
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	2b00      	cmp	r3, #0
 800133c:	da01      	bge.n	8001342 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001342:	79fb      	ldrb	r3, [r7, #7]
}
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	40023c00 	.word	0x40023c00
 8001354:	45670123 	.word	0x45670123
 8001358:	cdef89ab 	.word	0xcdef89ab

0800135c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_FLASH_Lock+0x1c>)
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	4a04      	ldr	r2, [pc, #16]	; (8001378 <HAL_FLASH_Lock+0x1c>)
 8001366:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800136a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	40023c00 	.word	0x40023c00

0800137c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001388:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <FLASH_WaitForLastOperation+0x78>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800138e:	f7ff fe15 	bl	8000fbc <HAL_GetTick>
 8001392:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001394:	e010      	b.n	80013b8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800139c:	d00c      	beq.n	80013b8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d007      	beq.n	80013b4 <FLASH_WaitForLastOperation+0x38>
 80013a4:	f7ff fe0a 	bl	8000fbc <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d201      	bcs.n	80013b8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e019      	b.n	80013ec <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <FLASH_WaitForLastOperation+0x7c>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1e8      	bne.n	8001396 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <FLASH_WaitForLastOperation+0x7c>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d002      	beq.n	80013d6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <FLASH_WaitForLastOperation+0x7c>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <FLASH_WaitForLastOperation+0x7c>)
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80013e2:	f000 f8a3 	bl	800152c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
  
}  
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20002858 	.word	0x20002858
 80013f8:	40023c00 	.word	0x40023c00

080013fc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80013fc:	b490      	push	{r4, r7}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001408:	4b13      	ldr	r3, [pc, #76]	; (8001458 <FLASH_Program_DoubleWord+0x5c>)
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	4a12      	ldr	r2, [pc, #72]	; (8001458 <FLASH_Program_DoubleWord+0x5c>)
 800140e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001412:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001414:	4b10      	ldr	r3, [pc, #64]	; (8001458 <FLASH_Program_DoubleWord+0x5c>)
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	4a0f      	ldr	r2, [pc, #60]	; (8001458 <FLASH_Program_DoubleWord+0x5c>)
 800141a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800141e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001420:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <FLASH_Program_DoubleWord+0x5c>)
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	4a0c      	ldr	r2, [pc, #48]	; (8001458 <FLASH_Program_DoubleWord+0x5c>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001432:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001436:	e9d7 1200 	ldrd	r1, r2, [r7]
 800143a:	f04f 0300 	mov.w	r3, #0
 800143e:	f04f 0400 	mov.w	r4, #0
 8001442:	0013      	movs	r3, r2
 8001444:	2400      	movs	r4, #0
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	3204      	adds	r2, #4
 800144a:	6013      	str	r3, [r2, #0]
}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bc90      	pop	{r4, r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40023c00 	.word	0x40023c00

0800145c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001466:	4b0d      	ldr	r3, [pc, #52]	; (800149c <FLASH_Program_Word+0x40>)
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	4a0c      	ldr	r2, [pc, #48]	; (800149c <FLASH_Program_Word+0x40>)
 800146c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001470:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <FLASH_Program_Word+0x40>)
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	4a09      	ldr	r2, [pc, #36]	; (800149c <FLASH_Program_Word+0x40>)
 8001478:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800147c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800147e:	4b07      	ldr	r3, [pc, #28]	; (800149c <FLASH_Program_Word+0x40>)
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	4a06      	ldr	r2, [pc, #24]	; (800149c <FLASH_Program_Word+0x40>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	601a      	str	r2, [r3, #0]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	40023c00 	.word	0x40023c00

080014a0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80014ac:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <FLASH_Program_HalfWord+0x44>)
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	4a0c      	ldr	r2, [pc, #48]	; (80014e4 <FLASH_Program_HalfWord+0x44>)
 80014b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80014b8:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <FLASH_Program_HalfWord+0x44>)
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	4a09      	ldr	r2, [pc, #36]	; (80014e4 <FLASH_Program_HalfWord+0x44>)
 80014be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80014c4:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <FLASH_Program_HalfWord+0x44>)
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	4a06      	ldr	r2, [pc, #24]	; (80014e4 <FLASH_Program_HalfWord+0x44>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	887a      	ldrh	r2, [r7, #2]
 80014d4:	801a      	strh	r2, [r3, #0]
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40023c00 	.word	0x40023c00

080014e8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <FLASH_Program_Byte+0x40>)
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	4a0b      	ldr	r2, [pc, #44]	; (8001528 <FLASH_Program_Byte+0x40>)
 80014fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001500:	4b09      	ldr	r3, [pc, #36]	; (8001528 <FLASH_Program_Byte+0x40>)
 8001502:	4a09      	ldr	r2, [pc, #36]	; (8001528 <FLASH_Program_Byte+0x40>)
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001508:	4b07      	ldr	r3, [pc, #28]	; (8001528 <FLASH_Program_Byte+0x40>)
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	4a06      	ldr	r2, [pc, #24]	; (8001528 <FLASH_Program_Byte+0x40>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	78fa      	ldrb	r2, [r7, #3]
 8001518:	701a      	strb	r2, [r3, #0]
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40023c00 	.word	0x40023c00

0800152c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001530:	4b2f      	ldr	r3, [pc, #188]	; (80015f0 <FLASH_SetErrorCode+0xc4>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	f003 0310 	and.w	r3, r3, #16
 8001538:	2b00      	cmp	r3, #0
 800153a:	d008      	beq.n	800154e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800153c:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <FLASH_SetErrorCode+0xc8>)
 800153e:	69db      	ldr	r3, [r3, #28]
 8001540:	f043 0310 	orr.w	r3, r3, #16
 8001544:	4a2b      	ldr	r2, [pc, #172]	; (80015f4 <FLASH_SetErrorCode+0xc8>)
 8001546:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001548:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <FLASH_SetErrorCode+0xc4>)
 800154a:	2210      	movs	r2, #16
 800154c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800154e:	4b28      	ldr	r3, [pc, #160]	; (80015f0 <FLASH_SetErrorCode+0xc4>)
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	f003 0320 	and.w	r3, r3, #32
 8001556:	2b00      	cmp	r3, #0
 8001558:	d008      	beq.n	800156c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800155a:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <FLASH_SetErrorCode+0xc8>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	f043 0308 	orr.w	r3, r3, #8
 8001562:	4a24      	ldr	r2, [pc, #144]	; (80015f4 <FLASH_SetErrorCode+0xc8>)
 8001564:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001566:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <FLASH_SetErrorCode+0xc4>)
 8001568:	2220      	movs	r2, #32
 800156a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800156c:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <FLASH_SetErrorCode+0xc4>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001574:	2b00      	cmp	r3, #0
 8001576:	d008      	beq.n	800158a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001578:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <FLASH_SetErrorCode+0xc8>)
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	4a1c      	ldr	r2, [pc, #112]	; (80015f4 <FLASH_SetErrorCode+0xc8>)
 8001582:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001584:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <FLASH_SetErrorCode+0xc4>)
 8001586:	2240      	movs	r2, #64	; 0x40
 8001588:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800158a:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <FLASH_SetErrorCode+0xc4>)
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001592:	2b00      	cmp	r3, #0
 8001594:	d008      	beq.n	80015a8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001596:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <FLASH_SetErrorCode+0xc8>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	f043 0302 	orr.w	r3, r3, #2
 800159e:	4a15      	ldr	r2, [pc, #84]	; (80015f4 <FLASH_SetErrorCode+0xc8>)
 80015a0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <FLASH_SetErrorCode+0xc4>)
 80015a4:	2280      	movs	r2, #128	; 0x80
 80015a6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <FLASH_SetErrorCode+0xc4>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d009      	beq.n	80015c8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <FLASH_SetErrorCode+0xc8>)
 80015b6:	69db      	ldr	r3, [r3, #28]
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	4a0d      	ldr	r2, [pc, #52]	; (80015f4 <FLASH_SetErrorCode+0xc8>)
 80015be:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <FLASH_SetErrorCode+0xc4>)
 80015c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <FLASH_SetErrorCode+0xc4>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d008      	beq.n	80015e6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80015d4:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <FLASH_SetErrorCode+0xc8>)
 80015d6:	69db      	ldr	r3, [r3, #28]
 80015d8:	f043 0320 	orr.w	r3, r3, #32
 80015dc:	4a05      	ldr	r2, [pc, #20]	; (80015f4 <FLASH_SetErrorCode+0xc8>)
 80015de:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <FLASH_SetErrorCode+0xc4>)
 80015e2:	2202      	movs	r2, #2
 80015e4:	60da      	str	r2, [r3, #12]
  }
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	40023c00 	.word	0x40023c00
 80015f4:	20002858 	.word	0x20002858

080015f8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800160a:	4b32      	ldr	r3, [pc, #200]	; (80016d4 <HAL_FLASHEx_Erase+0xdc>)
 800160c:	7e1b      	ldrb	r3, [r3, #24]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d101      	bne.n	8001616 <HAL_FLASHEx_Erase+0x1e>
 8001612:	2302      	movs	r3, #2
 8001614:	e05a      	b.n	80016cc <HAL_FLASHEx_Erase+0xd4>
 8001616:	4b2f      	ldr	r3, [pc, #188]	; (80016d4 <HAL_FLASHEx_Erase+0xdc>)
 8001618:	2201      	movs	r2, #1
 800161a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800161c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001620:	f7ff feac 	bl	800137c <FLASH_WaitForLastOperation>
 8001624:	4603      	mov	r3, r0
 8001626:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d14a      	bne.n	80016c4 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	f04f 32ff 	mov.w	r2, #4294967295
 8001634:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d117      	bne.n	800166e <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	b2da      	uxtb	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	4619      	mov	r1, r3
 800164a:	4610      	mov	r0, r2
 800164c:	f000 f846 	bl	80016dc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001650:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001654:	f7ff fe92 	bl	800137c <FLASH_WaitForLastOperation>
 8001658:	4603      	mov	r3, r0
 800165a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800165c:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <HAL_FLASHEx_Erase+0xe0>)
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	4a1d      	ldr	r2, [pc, #116]	; (80016d8 <HAL_FLASHEx_Erase+0xe0>)
 8001662:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001666:	f023 0304 	bic.w	r3, r3, #4
 800166a:	6113      	str	r3, [r2, #16]
 800166c:	e028      	b.n	80016c0 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	e01c      	b.n	80016b0 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	4619      	mov	r1, r3
 800167e:	68b8      	ldr	r0, [r7, #8]
 8001680:	f000 f866 	bl	8001750 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001684:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001688:	f7ff fe78 	bl	800137c <FLASH_WaitForLastOperation>
 800168c:	4603      	mov	r3, r0
 800168e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <HAL_FLASHEx_Erase+0xe0>)
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	4a10      	ldr	r2, [pc, #64]	; (80016d8 <HAL_FLASHEx_Erase+0xe0>)
 8001696:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800169a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800169c:	7bfb      	ldrb	r3, [r7, #15]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	601a      	str	r2, [r3, #0]
          break;
 80016a8:	e00a      	b.n	80016c0 <HAL_FLASHEx_Erase+0xc8>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	3301      	adds	r3, #1
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68da      	ldr	r2, [r3, #12]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4413      	add	r3, r2
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d3da      	bcc.n	8001676 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80016c0:	f000 f894 	bl	80017ec <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80016c4:	4b03      	ldr	r3, [pc, #12]	; (80016d4 <HAL_FLASHEx_Erase+0xdc>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	761a      	strb	r2, [r3, #24]

  return status;
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20002858 	.word	0x20002858
 80016d8:	40023c00 	.word	0x40023c00

080016dc <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80016e8:	4b18      	ldr	r3, [pc, #96]	; (800174c <FLASH_MassErase+0x70>)
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	4a17      	ldr	r2, [pc, #92]	; (800174c <FLASH_MassErase+0x70>)
 80016ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016f2:	6113      	str	r3, [r2, #16]

  if(Banks == FLASH_BANK_BOTH)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d108      	bne.n	800170c <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <FLASH_MassErase+0x70>)
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	4a13      	ldr	r2, [pc, #76]	; (800174c <FLASH_MassErase+0x70>)
 8001700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001704:	f043 0304 	orr.w	r3, r3, #4
 8001708:	6113      	str	r3, [r2, #16]
 800170a:	e00f      	b.n	800172c <FLASH_MassErase+0x50>
  }
  else if(Banks == FLASH_BANK_1)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d106      	bne.n	8001720 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <FLASH_MassErase+0x70>)
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	4a0d      	ldr	r2, [pc, #52]	; (800174c <FLASH_MassErase+0x70>)
 8001718:	f043 0304 	orr.w	r3, r3, #4
 800171c:	6113      	str	r3, [r2, #16]
 800171e:	e005      	b.n	800172c <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8001720:	4b0a      	ldr	r3, [pc, #40]	; (800174c <FLASH_MassErase+0x70>)
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	4a09      	ldr	r2, [pc, #36]	; (800174c <FLASH_MassErase+0x70>)
 8001726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800172a:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800172c:	4b07      	ldr	r3, [pc, #28]	; (800174c <FLASH_MassErase+0x70>)
 800172e:	691a      	ldr	r2, [r3, #16]
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	4313      	orrs	r3, r2
 8001736:	4a05      	ldr	r2, [pc, #20]	; (800174c <FLASH_MassErase+0x70>)
 8001738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173c:	6113      	str	r3, [r2, #16]
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40023c00 	.word	0x40023c00

08001750 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d102      	bne.n	800176c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	e010      	b.n	800178e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d103      	bne.n	800177a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001772:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	e009      	b.n	800178e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800177a:	78fb      	ldrb	r3, [r7, #3]
 800177c:	2b02      	cmp	r3, #2
 800177e:	d103      	bne.n	8001788 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001780:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	e002      	b.n	800178e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001788:	f44f 7340 	mov.w	r3, #768	; 0x300
 800178c:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b0b      	cmp	r3, #11
 8001792:	d902      	bls.n	800179a <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3304      	adds	r3, #4
 8001798:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800179a:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <FLASH_Erase_Sector+0x98>)
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <FLASH_Erase_Sector+0x98>)
 80017a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80017a6:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <FLASH_Erase_Sector+0x98>)
 80017a8:	691a      	ldr	r2, [r3, #16]
 80017aa:	490f      	ldr	r1, [pc, #60]	; (80017e8 <FLASH_Erase_Sector+0x98>)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80017b2:	4b0d      	ldr	r3, [pc, #52]	; (80017e8 <FLASH_Erase_Sector+0x98>)
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	4a0c      	ldr	r2, [pc, #48]	; (80017e8 <FLASH_Erase_Sector+0x98>)
 80017b8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017bc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <FLASH_Erase_Sector+0x98>)
 80017c0:	691a      	ldr	r2, [r3, #16]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	4313      	orrs	r3, r2
 80017c8:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <FLASH_Erase_Sector+0x98>)
 80017ca:	f043 0302 	orr.w	r3, r3, #2
 80017ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <FLASH_Erase_Sector+0x98>)
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <FLASH_Erase_Sector+0x98>)
 80017d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017da:	6113      	str	r3, [r2, #16]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	40023c00 	.word	0x40023c00

080017ec <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80017f0:	4b20      	ldr	r3, [pc, #128]	; (8001874 <FLASH_FlushCaches+0x88>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d017      	beq.n	800182c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80017fc:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <FLASH_FlushCaches+0x88>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a1c      	ldr	r2, [pc, #112]	; (8001874 <FLASH_FlushCaches+0x88>)
 8001802:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001806:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001808:	4b1a      	ldr	r3, [pc, #104]	; (8001874 <FLASH_FlushCaches+0x88>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a19      	ldr	r2, [pc, #100]	; (8001874 <FLASH_FlushCaches+0x88>)
 800180e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	4b17      	ldr	r3, [pc, #92]	; (8001874 <FLASH_FlushCaches+0x88>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a16      	ldr	r2, [pc, #88]	; (8001874 <FLASH_FlushCaches+0x88>)
 800181a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800181e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001820:	4b14      	ldr	r3, [pc, #80]	; (8001874 <FLASH_FlushCaches+0x88>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a13      	ldr	r2, [pc, #76]	; (8001874 <FLASH_FlushCaches+0x88>)
 8001826:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800182a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <FLASH_FlushCaches+0x88>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001834:	2b00      	cmp	r3, #0
 8001836:	d017      	beq.n	8001868 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001838:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <FLASH_FlushCaches+0x88>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0d      	ldr	r2, [pc, #52]	; (8001874 <FLASH_FlushCaches+0x88>)
 800183e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001842:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001844:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <FLASH_FlushCaches+0x88>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <FLASH_FlushCaches+0x88>)
 800184a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <FLASH_FlushCaches+0x88>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a07      	ldr	r2, [pc, #28]	; (8001874 <FLASH_FlushCaches+0x88>)
 8001856:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800185a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <FLASH_FlushCaches+0x88>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a04      	ldr	r2, [pc, #16]	; (8001874 <FLASH_FlushCaches+0x88>)
 8001862:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001866:	6013      	str	r3, [r2, #0]
  }
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40023c00 	.word	0x40023c00

08001878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001878:	b480      	push	{r7}
 800187a:	b089      	sub	sp, #36	; 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800188a:	2300      	movs	r3, #0
 800188c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	e177      	b.n	8001b84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001894:	2201      	movs	r2, #1
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	f040 8166 	bne.w	8001b7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d00b      	beq.n	80018d2 <HAL_GPIO_Init+0x5a>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d007      	beq.n	80018d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018c6:	2b11      	cmp	r3, #17
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b12      	cmp	r3, #18
 80018d0:	d130      	bne.n	8001934 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	2203      	movs	r2, #3
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001908:	2201      	movs	r2, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	f003 0201 	and.w	r2, r3, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	2203      	movs	r2, #3
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b02      	cmp	r3, #2
 800196a:	d003      	beq.n	8001974 <HAL_GPIO_Init+0xfc>
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b12      	cmp	r3, #18
 8001972:	d123      	bne.n	80019bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	08da      	lsrs	r2, r3, #3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3208      	adds	r2, #8
 800197c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001980:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	220f      	movs	r2, #15
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	691a      	ldr	r2, [r3, #16]
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	08da      	lsrs	r2, r3, #3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	3208      	adds	r2, #8
 80019b6:	69b9      	ldr	r1, [r7, #24]
 80019b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	2203      	movs	r2, #3
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 0203 	and.w	r2, r3, #3
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 80c0 	beq.w	8001b7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	4b65      	ldr	r3, [pc, #404]	; (8001b98 <HAL_GPIO_Init+0x320>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	4a64      	ldr	r2, [pc, #400]	; (8001b98 <HAL_GPIO_Init+0x320>)
 8001a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0e:	4b62      	ldr	r3, [pc, #392]	; (8001b98 <HAL_GPIO_Init+0x320>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a1a:	4a60      	ldr	r2, [pc, #384]	; (8001b9c <HAL_GPIO_Init+0x324>)
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	089b      	lsrs	r3, r3, #2
 8001a20:	3302      	adds	r3, #2
 8001a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	220f      	movs	r2, #15
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a57      	ldr	r2, [pc, #348]	; (8001ba0 <HAL_GPIO_Init+0x328>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d037      	beq.n	8001ab6 <HAL_GPIO_Init+0x23e>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a56      	ldr	r2, [pc, #344]	; (8001ba4 <HAL_GPIO_Init+0x32c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d031      	beq.n	8001ab2 <HAL_GPIO_Init+0x23a>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a55      	ldr	r2, [pc, #340]	; (8001ba8 <HAL_GPIO_Init+0x330>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d02b      	beq.n	8001aae <HAL_GPIO_Init+0x236>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a54      	ldr	r2, [pc, #336]	; (8001bac <HAL_GPIO_Init+0x334>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d025      	beq.n	8001aaa <HAL_GPIO_Init+0x232>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a53      	ldr	r2, [pc, #332]	; (8001bb0 <HAL_GPIO_Init+0x338>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d01f      	beq.n	8001aa6 <HAL_GPIO_Init+0x22e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a52      	ldr	r2, [pc, #328]	; (8001bb4 <HAL_GPIO_Init+0x33c>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d019      	beq.n	8001aa2 <HAL_GPIO_Init+0x22a>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a51      	ldr	r2, [pc, #324]	; (8001bb8 <HAL_GPIO_Init+0x340>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d013      	beq.n	8001a9e <HAL_GPIO_Init+0x226>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a50      	ldr	r2, [pc, #320]	; (8001bbc <HAL_GPIO_Init+0x344>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d00d      	beq.n	8001a9a <HAL_GPIO_Init+0x222>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a4f      	ldr	r2, [pc, #316]	; (8001bc0 <HAL_GPIO_Init+0x348>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d007      	beq.n	8001a96 <HAL_GPIO_Init+0x21e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a4e      	ldr	r2, [pc, #312]	; (8001bc4 <HAL_GPIO_Init+0x34c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d101      	bne.n	8001a92 <HAL_GPIO_Init+0x21a>
 8001a8e:	2309      	movs	r3, #9
 8001a90:	e012      	b.n	8001ab8 <HAL_GPIO_Init+0x240>
 8001a92:	230a      	movs	r3, #10
 8001a94:	e010      	b.n	8001ab8 <HAL_GPIO_Init+0x240>
 8001a96:	2308      	movs	r3, #8
 8001a98:	e00e      	b.n	8001ab8 <HAL_GPIO_Init+0x240>
 8001a9a:	2307      	movs	r3, #7
 8001a9c:	e00c      	b.n	8001ab8 <HAL_GPIO_Init+0x240>
 8001a9e:	2306      	movs	r3, #6
 8001aa0:	e00a      	b.n	8001ab8 <HAL_GPIO_Init+0x240>
 8001aa2:	2305      	movs	r3, #5
 8001aa4:	e008      	b.n	8001ab8 <HAL_GPIO_Init+0x240>
 8001aa6:	2304      	movs	r3, #4
 8001aa8:	e006      	b.n	8001ab8 <HAL_GPIO_Init+0x240>
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e004      	b.n	8001ab8 <HAL_GPIO_Init+0x240>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e002      	b.n	8001ab8 <HAL_GPIO_Init+0x240>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <HAL_GPIO_Init+0x240>
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	69fa      	ldr	r2, [r7, #28]
 8001aba:	f002 0203 	and.w	r2, r2, #3
 8001abe:	0092      	lsls	r2, r2, #2
 8001ac0:	4093      	lsls	r3, r2
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ac8:	4934      	ldr	r1, [pc, #208]	; (8001b9c <HAL_GPIO_Init+0x324>)
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	089b      	lsrs	r3, r3, #2
 8001ace:	3302      	adds	r3, #2
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ad6:	4b3c      	ldr	r3, [pc, #240]	; (8001bc8 <HAL_GPIO_Init+0x350>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001afa:	4a33      	ldr	r2, [pc, #204]	; (8001bc8 <HAL_GPIO_Init+0x350>)
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b00:	4b31      	ldr	r3, [pc, #196]	; (8001bc8 <HAL_GPIO_Init+0x350>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b24:	4a28      	ldr	r2, [pc, #160]	; (8001bc8 <HAL_GPIO_Init+0x350>)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b2a:	4b27      	ldr	r3, [pc, #156]	; (8001bc8 <HAL_GPIO_Init+0x350>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4013      	ands	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b4e:	4a1e      	ldr	r2, [pc, #120]	; (8001bc8 <HAL_GPIO_Init+0x350>)
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b54:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <HAL_GPIO_Init+0x350>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b78:	4a13      	ldr	r2, [pc, #76]	; (8001bc8 <HAL_GPIO_Init+0x350>)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3301      	adds	r3, #1
 8001b82:	61fb      	str	r3, [r7, #28]
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	2b0f      	cmp	r3, #15
 8001b88:	f67f ae84 	bls.w	8001894 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	3724      	adds	r7, #36	; 0x24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40013800 	.word	0x40013800
 8001ba0:	40020000 	.word	0x40020000
 8001ba4:	40020400 	.word	0x40020400
 8001ba8:	40020800 	.word	0x40020800
 8001bac:	40020c00 	.word	0x40020c00
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40021400 	.word	0x40021400
 8001bb8:	40021800 	.word	0x40021800
 8001bbc:	40021c00 	.word	0x40021c00
 8001bc0:	40022000 	.word	0x40022000
 8001bc4:	40022400 	.word	0x40022400
 8001bc8:	40013c00 	.word	0x40013c00

08001bcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691a      	ldr	r2, [r3, #16]
 8001bdc:	887b      	ldrh	r3, [r7, #2]
 8001bde:	4013      	ands	r3, r2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001be4:	2301      	movs	r3, #1
 8001be6:	73fb      	strb	r3, [r7, #15]
 8001be8:	e001      	b.n	8001bee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bea:	2300      	movs	r3, #0
 8001bec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	807b      	strh	r3, [r7, #2]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c0c:	787b      	ldrb	r3, [r7, #1]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c12:	887a      	ldrh	r2, [r7, #2]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c18:	e003      	b.n	8001c22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c1a:	887b      	ldrh	r3, [r7, #2]
 8001c1c:	041a      	lsls	r2, r3, #16
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	619a      	str	r2, [r3, #24]
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e25b      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d075      	beq.n	8001d3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c4e:	4ba3      	ldr	r3, [pc, #652]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 030c 	and.w	r3, r3, #12
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d00c      	beq.n	8001c74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c5a:	4ba0      	ldr	r3, [pc, #640]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d112      	bne.n	8001c8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c66:	4b9d      	ldr	r3, [pc, #628]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c72:	d10b      	bne.n	8001c8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c74:	4b99      	ldr	r3, [pc, #612]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d05b      	beq.n	8001d38 <HAL_RCC_OscConfig+0x108>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d157      	bne.n	8001d38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e236      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c94:	d106      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x74>
 8001c96:	4b91      	ldr	r3, [pc, #580]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a90      	ldr	r2, [pc, #576]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	e01d      	b.n	8001ce0 <HAL_RCC_OscConfig+0xb0>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cac:	d10c      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x98>
 8001cae:	4b8b      	ldr	r3, [pc, #556]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a8a      	ldr	r2, [pc, #552]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	4b88      	ldr	r3, [pc, #544]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a87      	ldr	r2, [pc, #540]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	e00b      	b.n	8001ce0 <HAL_RCC_OscConfig+0xb0>
 8001cc8:	4b84      	ldr	r3, [pc, #528]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a83      	ldr	r2, [pc, #524]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	4b81      	ldr	r3, [pc, #516]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a80      	ldr	r2, [pc, #512]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d013      	beq.n	8001d10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7ff f968 	bl	8000fbc <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cf0:	f7ff f964 	bl	8000fbc <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b64      	cmp	r3, #100	; 0x64
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e1fb      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d02:	4b76      	ldr	r3, [pc, #472]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f0      	beq.n	8001cf0 <HAL_RCC_OscConfig+0xc0>
 8001d0e:	e014      	b.n	8001d3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d10:	f7ff f954 	bl	8000fbc <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d18:	f7ff f950 	bl	8000fbc <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b64      	cmp	r3, #100	; 0x64
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e1e7      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2a:	4b6c      	ldr	r3, [pc, #432]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0xe8>
 8001d36:	e000      	b.n	8001d3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d063      	beq.n	8001e0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d46:	4b65      	ldr	r3, [pc, #404]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00b      	beq.n	8001d6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d52:	4b62      	ldr	r3, [pc, #392]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d11c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d5e:	4b5f      	ldr	r3, [pc, #380]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d116      	bne.n	8001d98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6a:	4b5c      	ldr	r3, [pc, #368]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d005      	beq.n	8001d82 <HAL_RCC_OscConfig+0x152>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d001      	beq.n	8001d82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e1bb      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d82:	4b56      	ldr	r3, [pc, #344]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	4952      	ldr	r1, [pc, #328]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d96:	e03a      	b.n	8001e0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d020      	beq.n	8001de2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001da0:	4b4f      	ldr	r3, [pc, #316]	; (8001ee0 <HAL_RCC_OscConfig+0x2b0>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da6:	f7ff f909 	bl	8000fbc <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dae:	f7ff f905 	bl	8000fbc <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e19c      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc0:	4b46      	ldr	r3, [pc, #280]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0f0      	beq.n	8001dae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dcc:	4b43      	ldr	r3, [pc, #268]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	4940      	ldr	r1, [pc, #256]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	600b      	str	r3, [r1, #0]
 8001de0:	e015      	b.n	8001e0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001de2:	4b3f      	ldr	r3, [pc, #252]	; (8001ee0 <HAL_RCC_OscConfig+0x2b0>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de8:	f7ff f8e8 	bl	8000fbc <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001df0:	f7ff f8e4 	bl	8000fbc <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e17b      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e02:	4b36      	ldr	r3, [pc, #216]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d030      	beq.n	8001e7c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d016      	beq.n	8001e50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e22:	4b30      	ldr	r3, [pc, #192]	; (8001ee4 <HAL_RCC_OscConfig+0x2b4>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e28:	f7ff f8c8 	bl	8000fbc <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e30:	f7ff f8c4 	bl	8000fbc <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e15b      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e42:	4b26      	ldr	r3, [pc, #152]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f0      	beq.n	8001e30 <HAL_RCC_OscConfig+0x200>
 8001e4e:	e015      	b.n	8001e7c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e50:	4b24      	ldr	r3, [pc, #144]	; (8001ee4 <HAL_RCC_OscConfig+0x2b4>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e56:	f7ff f8b1 	bl	8000fbc <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e5e:	f7ff f8ad 	bl	8000fbc <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e144      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e70:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1f0      	bne.n	8001e5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 80a0 	beq.w	8001fca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e8e:	4b13      	ldr	r3, [pc, #76]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10f      	bne.n	8001eba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <HAL_RCC_OscConfig+0x2b8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d121      	bne.n	8001f0a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ec6:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <HAL_RCC_OscConfig+0x2b8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a07      	ldr	r2, [pc, #28]	; (8001ee8 <HAL_RCC_OscConfig+0x2b8>)
 8001ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed2:	f7ff f873 	bl	8000fbc <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed8:	e011      	b.n	8001efe <HAL_RCC_OscConfig+0x2ce>
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	42470000 	.word	0x42470000
 8001ee4:	42470e80 	.word	0x42470e80
 8001ee8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eec:	f7ff f866 	bl	8000fbc <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e0fd      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efe:	4b81      	ldr	r3, [pc, #516]	; (8002104 <HAL_RCC_OscConfig+0x4d4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d106      	bne.n	8001f20 <HAL_RCC_OscConfig+0x2f0>
 8001f12:	4b7d      	ldr	r3, [pc, #500]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8001f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f16:	4a7c      	ldr	r2, [pc, #496]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f1e:	e01c      	b.n	8001f5a <HAL_RCC_OscConfig+0x32a>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2b05      	cmp	r3, #5
 8001f26:	d10c      	bne.n	8001f42 <HAL_RCC_OscConfig+0x312>
 8001f28:	4b77      	ldr	r3, [pc, #476]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8001f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2c:	4a76      	ldr	r2, [pc, #472]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8001f2e:	f043 0304 	orr.w	r3, r3, #4
 8001f32:	6713      	str	r3, [r2, #112]	; 0x70
 8001f34:	4b74      	ldr	r3, [pc, #464]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8001f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f38:	4a73      	ldr	r2, [pc, #460]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f40:	e00b      	b.n	8001f5a <HAL_RCC_OscConfig+0x32a>
 8001f42:	4b71      	ldr	r3, [pc, #452]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8001f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f46:	4a70      	ldr	r2, [pc, #448]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f4e:	4b6e      	ldr	r3, [pc, #440]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8001f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f52:	4a6d      	ldr	r2, [pc, #436]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8001f54:	f023 0304 	bic.w	r3, r3, #4
 8001f58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d015      	beq.n	8001f8e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f62:	f7ff f82b 	bl	8000fbc <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f68:	e00a      	b.n	8001f80 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f6a:	f7ff f827 	bl	8000fbc <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e0bc      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f80:	4b61      	ldr	r3, [pc, #388]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8001f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0ee      	beq.n	8001f6a <HAL_RCC_OscConfig+0x33a>
 8001f8c:	e014      	b.n	8001fb8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8e:	f7ff f815 	bl	8000fbc <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f94:	e00a      	b.n	8001fac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f96:	f7ff f811 	bl	8000fbc <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e0a6      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fac:	4b56      	ldr	r3, [pc, #344]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8001fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1ee      	bne.n	8001f96 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fb8:	7dfb      	ldrb	r3, [r7, #23]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d105      	bne.n	8001fca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fbe:	4b52      	ldr	r3, [pc, #328]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	4a51      	ldr	r2, [pc, #324]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8001fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 8092 	beq.w	80020f8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fd4:	4b4c      	ldr	r3, [pc, #304]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 030c 	and.w	r3, r3, #12
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d05c      	beq.n	800209a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d141      	bne.n	800206c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe8:	4b48      	ldr	r3, [pc, #288]	; (800210c <HAL_RCC_OscConfig+0x4dc>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fee:	f7fe ffe5 	bl	8000fbc <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff6:	f7fe ffe1 	bl	8000fbc <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e078      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002008:	4b3f      	ldr	r3, [pc, #252]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1f0      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69da      	ldr	r2, [r3, #28]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	431a      	orrs	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002022:	019b      	lsls	r3, r3, #6
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202a:	085b      	lsrs	r3, r3, #1
 800202c:	3b01      	subs	r3, #1
 800202e:	041b      	lsls	r3, r3, #16
 8002030:	431a      	orrs	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002036:	061b      	lsls	r3, r3, #24
 8002038:	4933      	ldr	r1, [pc, #204]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 800203a:	4313      	orrs	r3, r2
 800203c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800203e:	4b33      	ldr	r3, [pc, #204]	; (800210c <HAL_RCC_OscConfig+0x4dc>)
 8002040:	2201      	movs	r2, #1
 8002042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7fe ffba 	bl	8000fbc <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800204c:	f7fe ffb6 	bl	8000fbc <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e04d      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205e:	4b2a      	ldr	r3, [pc, #168]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0x41c>
 800206a:	e045      	b.n	80020f8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206c:	4b27      	ldr	r3, [pc, #156]	; (800210c <HAL_RCC_OscConfig+0x4dc>)
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002072:	f7fe ffa3 	bl	8000fbc <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800207a:	f7fe ff9f 	bl	8000fbc <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e036      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800208c:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1f0      	bne.n	800207a <HAL_RCC_OscConfig+0x44a>
 8002098:	e02e      	b.n	80020f8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e029      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020a6:	4b18      	ldr	r3, [pc, #96]	; (8002108 <HAL_RCC_OscConfig+0x4d8>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d11c      	bne.n	80020f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d115      	bne.n	80020f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020ce:	4013      	ands	r3, r2
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d10d      	bne.n	80020f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d106      	bne.n	80020f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40007000 	.word	0x40007000
 8002108:	40023800 	.word	0x40023800
 800210c:	42470060 	.word	0x42470060

08002110 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0cc      	b.n	80022be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002124:	4b68      	ldr	r3, [pc, #416]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d90c      	bls.n	800214c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002132:	4b65      	ldr	r3, [pc, #404]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213a:	4b63      	ldr	r3, [pc, #396]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d001      	beq.n	800214c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0b8      	b.n	80022be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d020      	beq.n	800219a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002164:	4b59      	ldr	r3, [pc, #356]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	4a58      	ldr	r2, [pc, #352]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800216e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800217c:	4b53      	ldr	r3, [pc, #332]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	4a52      	ldr	r2, [pc, #328]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002182:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002186:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002188:	4b50      	ldr	r3, [pc, #320]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	494d      	ldr	r1, [pc, #308]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	4313      	orrs	r3, r2
 8002198:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d044      	beq.n	8002230 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d107      	bne.n	80021be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	4b47      	ldr	r3, [pc, #284]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d119      	bne.n	80021ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e07f      	b.n	80022be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d003      	beq.n	80021ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d107      	bne.n	80021de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ce:	4b3f      	ldr	r3, [pc, #252]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d109      	bne.n	80021ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e06f      	b.n	80022be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021de:	4b3b      	ldr	r3, [pc, #236]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e067      	b.n	80022be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ee:	4b37      	ldr	r3, [pc, #220]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f023 0203 	bic.w	r2, r3, #3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	4934      	ldr	r1, [pc, #208]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002200:	f7fe fedc 	bl	8000fbc <HAL_GetTick>
 8002204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002206:	e00a      	b.n	800221e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002208:	f7fe fed8 	bl	8000fbc <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	; 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e04f      	b.n	80022be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221e:	4b2b      	ldr	r3, [pc, #172]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 020c 	and.w	r2, r3, #12
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	429a      	cmp	r2, r3
 800222e:	d1eb      	bne.n	8002208 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002230:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 030f 	and.w	r3, r3, #15
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d20c      	bcs.n	8002258 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223e:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002246:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d001      	beq.n	8002258 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e032      	b.n	80022be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4916      	ldr	r1, [pc, #88]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	4313      	orrs	r3, r2
 8002274:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d009      	beq.n	8002296 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	490e      	ldr	r1, [pc, #56]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	4313      	orrs	r3, r2
 8002294:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002296:	f000 f821 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 800229a:	4601      	mov	r1, r0
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <HAL_RCC_ClockConfig+0x1c0>)
 80022a8:	5cd3      	ldrb	r3, [r2, r3]
 80022aa:	fa21 f303 	lsr.w	r3, r1, r3
 80022ae:	4a09      	ldr	r2, [pc, #36]	; (80022d4 <HAL_RCC_ClockConfig+0x1c4>)
 80022b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <HAL_RCC_ClockConfig+0x1c8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe fe50 	bl	8000f5c <HAL_InitTick>

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40023c00 	.word	0x40023c00
 80022cc:	40023800 	.word	0x40023800
 80022d0:	080039b4 	.word	0x080039b4
 80022d4:	20000008 	.word	0x20000008
 80022d8:	2000000c 	.word	0x2000000c

080022dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	607b      	str	r3, [r7, #4]
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	2300      	movs	r3, #0
 80022ec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022f2:	4b63      	ldr	r3, [pc, #396]	; (8002480 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d007      	beq.n	800230e <HAL_RCC_GetSysClockFreq+0x32>
 80022fe:	2b08      	cmp	r3, #8
 8002300:	d008      	beq.n	8002314 <HAL_RCC_GetSysClockFreq+0x38>
 8002302:	2b00      	cmp	r3, #0
 8002304:	f040 80b4 	bne.w	8002470 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002308:	4b5e      	ldr	r3, [pc, #376]	; (8002484 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800230a:	60bb      	str	r3, [r7, #8]
       break;
 800230c:	e0b3      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800230e:	4b5e      	ldr	r3, [pc, #376]	; (8002488 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002310:	60bb      	str	r3, [r7, #8]
      break;
 8002312:	e0b0      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002314:	4b5a      	ldr	r3, [pc, #360]	; (8002480 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800231c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800231e:	4b58      	ldr	r3, [pc, #352]	; (8002480 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d04a      	beq.n	80023c0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800232a:	4b55      	ldr	r3, [pc, #340]	; (8002480 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	099b      	lsrs	r3, r3, #6
 8002330:	f04f 0400 	mov.w	r4, #0
 8002334:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	ea03 0501 	and.w	r5, r3, r1
 8002340:	ea04 0602 	and.w	r6, r4, r2
 8002344:	4629      	mov	r1, r5
 8002346:	4632      	mov	r2, r6
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	f04f 0400 	mov.w	r4, #0
 8002350:	0154      	lsls	r4, r2, #5
 8002352:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002356:	014b      	lsls	r3, r1, #5
 8002358:	4619      	mov	r1, r3
 800235a:	4622      	mov	r2, r4
 800235c:	1b49      	subs	r1, r1, r5
 800235e:	eb62 0206 	sbc.w	r2, r2, r6
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	f04f 0400 	mov.w	r4, #0
 800236a:	0194      	lsls	r4, r2, #6
 800236c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002370:	018b      	lsls	r3, r1, #6
 8002372:	1a5b      	subs	r3, r3, r1
 8002374:	eb64 0402 	sbc.w	r4, r4, r2
 8002378:	f04f 0100 	mov.w	r1, #0
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	00e2      	lsls	r2, r4, #3
 8002382:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002386:	00d9      	lsls	r1, r3, #3
 8002388:	460b      	mov	r3, r1
 800238a:	4614      	mov	r4, r2
 800238c:	195b      	adds	r3, r3, r5
 800238e:	eb44 0406 	adc.w	r4, r4, r6
 8002392:	f04f 0100 	mov.w	r1, #0
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	0262      	lsls	r2, r4, #9
 800239c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80023a0:	0259      	lsls	r1, r3, #9
 80023a2:	460b      	mov	r3, r1
 80023a4:	4614      	mov	r4, r2
 80023a6:	4618      	mov	r0, r3
 80023a8:	4621      	mov	r1, r4
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f04f 0400 	mov.w	r4, #0
 80023b0:	461a      	mov	r2, r3
 80023b2:	4623      	mov	r3, r4
 80023b4:	f7fd ff74 	bl	80002a0 <__aeabi_uldivmod>
 80023b8:	4603      	mov	r3, r0
 80023ba:	460c      	mov	r4, r1
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	e049      	b.n	8002454 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023c0:	4b2f      	ldr	r3, [pc, #188]	; (8002480 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	099b      	lsrs	r3, r3, #6
 80023c6:	f04f 0400 	mov.w	r4, #0
 80023ca:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	ea03 0501 	and.w	r5, r3, r1
 80023d6:	ea04 0602 	and.w	r6, r4, r2
 80023da:	4629      	mov	r1, r5
 80023dc:	4632      	mov	r2, r6
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	f04f 0400 	mov.w	r4, #0
 80023e6:	0154      	lsls	r4, r2, #5
 80023e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023ec:	014b      	lsls	r3, r1, #5
 80023ee:	4619      	mov	r1, r3
 80023f0:	4622      	mov	r2, r4
 80023f2:	1b49      	subs	r1, r1, r5
 80023f4:	eb62 0206 	sbc.w	r2, r2, r6
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	f04f 0400 	mov.w	r4, #0
 8002400:	0194      	lsls	r4, r2, #6
 8002402:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002406:	018b      	lsls	r3, r1, #6
 8002408:	1a5b      	subs	r3, r3, r1
 800240a:	eb64 0402 	sbc.w	r4, r4, r2
 800240e:	f04f 0100 	mov.w	r1, #0
 8002412:	f04f 0200 	mov.w	r2, #0
 8002416:	00e2      	lsls	r2, r4, #3
 8002418:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800241c:	00d9      	lsls	r1, r3, #3
 800241e:	460b      	mov	r3, r1
 8002420:	4614      	mov	r4, r2
 8002422:	195b      	adds	r3, r3, r5
 8002424:	eb44 0406 	adc.w	r4, r4, r6
 8002428:	f04f 0100 	mov.w	r1, #0
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	02a2      	lsls	r2, r4, #10
 8002432:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002436:	0299      	lsls	r1, r3, #10
 8002438:	460b      	mov	r3, r1
 800243a:	4614      	mov	r4, r2
 800243c:	4618      	mov	r0, r3
 800243e:	4621      	mov	r1, r4
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f04f 0400 	mov.w	r4, #0
 8002446:	461a      	mov	r2, r3
 8002448:	4623      	mov	r3, r4
 800244a:	f7fd ff29 	bl	80002a0 <__aeabi_uldivmod>
 800244e:	4603      	mov	r3, r0
 8002450:	460c      	mov	r4, r1
 8002452:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002454:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	0c1b      	lsrs	r3, r3, #16
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	3301      	adds	r3, #1
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	fbb2 f3f3 	udiv	r3, r2, r3
 800246c:	60bb      	str	r3, [r7, #8]
      break;
 800246e:	e002      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002470:	4b04      	ldr	r3, [pc, #16]	; (8002484 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002472:	60bb      	str	r3, [r7, #8]
      break;
 8002474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002476:	68bb      	ldr	r3, [r7, #8]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002480:	40023800 	.word	0x40023800
 8002484:	00f42400 	.word	0x00f42400
 8002488:	007a1200 	.word	0x007a1200

0800248c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002490:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002492:	681b      	ldr	r3, [r3, #0]
}
 8002494:	4618      	mov	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	20000008 	.word	0x20000008

080024a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024a8:	f7ff fff0 	bl	800248c <HAL_RCC_GetHCLKFreq>
 80024ac:	4601      	mov	r1, r0
 80024ae:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	0a9b      	lsrs	r3, r3, #10
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	4a03      	ldr	r2, [pc, #12]	; (80024c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ba:	5cd3      	ldrb	r3, [r2, r3]
 80024bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40023800 	.word	0x40023800
 80024c8:	080039c4 	.word	0x080039c4

080024cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024d0:	f7ff ffdc 	bl	800248c <HAL_RCC_GetHCLKFreq>
 80024d4:	4601      	mov	r1, r0
 80024d6:	4b05      	ldr	r3, [pc, #20]	; (80024ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	0b5b      	lsrs	r3, r3, #13
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	4a03      	ldr	r2, [pc, #12]	; (80024f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024e2:	5cd3      	ldrb	r3, [r2, r3]
 80024e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40023800 	.word	0x40023800
 80024f0:	080039c4 	.word	0x080039c4

080024f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e03f      	b.n	8002586 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d106      	bne.n	8002520 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7fe fbe4 	bl	8000ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2224      	movs	r2, #36	; 0x24
 8002524:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002536:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f9b1 	bl	80028a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800254c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695a      	ldr	r2, [r3, #20]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800255c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800256c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2220      	movs	r2, #32
 8002578:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2220      	movs	r2, #32
 8002580:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b088      	sub	sp, #32
 8002592:	af02      	add	r7, sp, #8
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	603b      	str	r3, [r7, #0]
 800259a:	4613      	mov	r3, r2
 800259c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b20      	cmp	r3, #32
 80025ac:	f040 8083 	bne.w	80026b6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <HAL_UART_Transmit+0x2e>
 80025b6:	88fb      	ldrh	r3, [r7, #6]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e07b      	b.n	80026b8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_UART_Transmit+0x40>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e074      	b.n	80026b8 <HAL_UART_Transmit+0x12a>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2221      	movs	r2, #33	; 0x21
 80025e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80025e4:	f7fe fcea 	bl	8000fbc <HAL_GetTick>
 80025e8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	88fa      	ldrh	r2, [r7, #6]
 80025ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	88fa      	ldrh	r2, [r7, #6]
 80025f4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80025fe:	e042      	b.n	8002686 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002604:	b29b      	uxth	r3, r3
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002616:	d122      	bne.n	800265e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	2200      	movs	r2, #0
 8002620:	2180      	movs	r1, #128	; 0x80
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 f8f2 	bl	800280c <UART_WaitOnFlagUntilTimeout>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e042      	b.n	80026b8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002644:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d103      	bne.n	8002656 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	3302      	adds	r3, #2
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	e017      	b.n	8002686 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	3301      	adds	r3, #1
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	e013      	b.n	8002686 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2200      	movs	r2, #0
 8002666:	2180      	movs	r1, #128	; 0x80
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 f8cf 	bl	800280c <UART_WaitOnFlagUntilTimeout>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e01f      	b.n	80026b8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	60ba      	str	r2, [r7, #8]
 800267e:	781a      	ldrb	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800268a:	b29b      	uxth	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1b7      	bne.n	8002600 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2200      	movs	r2, #0
 8002698:	2140      	movs	r1, #64	; 0x40
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f8b6 	bl	800280c <UART_WaitOnFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e006      	b.n	80026b8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2220      	movs	r2, #32
 80026ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	e000      	b.n	80026b8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80026b6:	2302      	movs	r3, #2
  }
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	603b      	str	r3, [r7, #0]
 80026cc:	4613      	mov	r3, r2
 80026ce:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b20      	cmp	r3, #32
 80026de:	f040 8090 	bne.w	8002802 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <HAL_UART_Receive+0x2e>
 80026e8:	88fb      	ldrh	r3, [r7, #6]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e088      	b.n	8002804 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d101      	bne.n	8002700 <HAL_UART_Receive+0x40>
 80026fc:	2302      	movs	r3, #2
 80026fe:	e081      	b.n	8002804 <HAL_UART_Receive+0x144>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2222      	movs	r2, #34	; 0x22
 8002712:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002716:	f7fe fc51 	bl	8000fbc <HAL_GetTick>
 800271a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	88fa      	ldrh	r2, [r7, #6]
 8002720:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	88fa      	ldrh	r2, [r7, #6]
 8002726:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002730:	e05c      	b.n	80027ec <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002736:	b29b      	uxth	r3, r3
 8002738:	3b01      	subs	r3, #1
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002748:	d12b      	bne.n	80027a2 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	2200      	movs	r2, #0
 8002752:	2120      	movs	r1, #32
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 f859 	bl	800280c <UART_WaitOnFlagUntilTimeout>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e04f      	b.n	8002804 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10c      	bne.n	800278a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	b29b      	uxth	r3, r3
 8002778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800277c:	b29a      	uxth	r2, r3
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	3302      	adds	r3, #2
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	e030      	b.n	80027ec <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	b29b      	uxth	r3, r3
 8002792:	b2db      	uxtb	r3, r3
 8002794:	b29a      	uxth	r2, r3
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	3301      	adds	r3, #1
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	e024      	b.n	80027ec <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2200      	movs	r2, #0
 80027aa:	2120      	movs	r1, #32
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 f82d 	bl	800280c <UART_WaitOnFlagUntilTimeout>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e023      	b.n	8002804 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d108      	bne.n	80027d6 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6859      	ldr	r1, [r3, #4]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	60ba      	str	r2, [r7, #8]
 80027d0:	b2ca      	uxtb	r2, r1
 80027d2:	701a      	strb	r2, [r3, #0]
 80027d4:	e00a      	b.n	80027ec <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	1c59      	adds	r1, r3, #1
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d19d      	bne.n	8002732 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2220      	movs	r2, #32
 80027fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	e000      	b.n	8002804 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8002802:	2302      	movs	r3, #2
  }
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	4613      	mov	r3, r2
 800281a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800281c:	e02c      	b.n	8002878 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002824:	d028      	beq.n	8002878 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d007      	beq.n	800283c <UART_WaitOnFlagUntilTimeout+0x30>
 800282c:	f7fe fbc6 	bl	8000fbc <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	429a      	cmp	r2, r3
 800283a:	d21d      	bcs.n	8002878 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800284a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0201 	bic.w	r2, r2, #1
 800285a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2220      	movs	r2, #32
 8002868:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e00f      	b.n	8002898 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	4013      	ands	r3, r2
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	429a      	cmp	r2, r3
 8002886:	bf0c      	ite	eq
 8002888:	2301      	moveq	r3, #1
 800288a:	2300      	movne	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	461a      	mov	r2, r3
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	429a      	cmp	r2, r3
 8002894:	d0c3      	beq.n	800281e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028a4:	b085      	sub	sp, #20
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	431a      	orrs	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80028e2:	f023 030c 	bic.w	r3, r3, #12
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6812      	ldr	r2, [r2, #0]
 80028ea:	68f9      	ldr	r1, [r7, #12]
 80028ec:	430b      	orrs	r3, r1
 80028ee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699a      	ldr	r2, [r3, #24]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800290e:	f040 818b 	bne.w	8002c28 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4ac1      	ldr	r2, [pc, #772]	; (8002c1c <UART_SetConfig+0x37c>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d005      	beq.n	8002928 <UART_SetConfig+0x88>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4abf      	ldr	r2, [pc, #764]	; (8002c20 <UART_SetConfig+0x380>)
 8002922:	4293      	cmp	r3, r2
 8002924:	f040 80bd 	bne.w	8002aa2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002928:	f7ff fdd0 	bl	80024cc <HAL_RCC_GetPCLK2Freq>
 800292c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	461d      	mov	r5, r3
 8002932:	f04f 0600 	mov.w	r6, #0
 8002936:	46a8      	mov	r8, r5
 8002938:	46b1      	mov	r9, r6
 800293a:	eb18 0308 	adds.w	r3, r8, r8
 800293e:	eb49 0409 	adc.w	r4, r9, r9
 8002942:	4698      	mov	r8, r3
 8002944:	46a1      	mov	r9, r4
 8002946:	eb18 0805 	adds.w	r8, r8, r5
 800294a:	eb49 0906 	adc.w	r9, r9, r6
 800294e:	f04f 0100 	mov.w	r1, #0
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800295a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800295e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002962:	4688      	mov	r8, r1
 8002964:	4691      	mov	r9, r2
 8002966:	eb18 0005 	adds.w	r0, r8, r5
 800296a:	eb49 0106 	adc.w	r1, r9, r6
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	461d      	mov	r5, r3
 8002974:	f04f 0600 	mov.w	r6, #0
 8002978:	196b      	adds	r3, r5, r5
 800297a:	eb46 0406 	adc.w	r4, r6, r6
 800297e:	461a      	mov	r2, r3
 8002980:	4623      	mov	r3, r4
 8002982:	f7fd fc8d 	bl	80002a0 <__aeabi_uldivmod>
 8002986:	4603      	mov	r3, r0
 8002988:	460c      	mov	r4, r1
 800298a:	461a      	mov	r2, r3
 800298c:	4ba5      	ldr	r3, [pc, #660]	; (8002c24 <UART_SetConfig+0x384>)
 800298e:	fba3 2302 	umull	r2, r3, r3, r2
 8002992:	095b      	lsrs	r3, r3, #5
 8002994:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	461d      	mov	r5, r3
 800299c:	f04f 0600 	mov.w	r6, #0
 80029a0:	46a9      	mov	r9, r5
 80029a2:	46b2      	mov	sl, r6
 80029a4:	eb19 0309 	adds.w	r3, r9, r9
 80029a8:	eb4a 040a 	adc.w	r4, sl, sl
 80029ac:	4699      	mov	r9, r3
 80029ae:	46a2      	mov	sl, r4
 80029b0:	eb19 0905 	adds.w	r9, r9, r5
 80029b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80029b8:	f04f 0100 	mov.w	r1, #0
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029cc:	4689      	mov	r9, r1
 80029ce:	4692      	mov	sl, r2
 80029d0:	eb19 0005 	adds.w	r0, r9, r5
 80029d4:	eb4a 0106 	adc.w	r1, sl, r6
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	461d      	mov	r5, r3
 80029de:	f04f 0600 	mov.w	r6, #0
 80029e2:	196b      	adds	r3, r5, r5
 80029e4:	eb46 0406 	adc.w	r4, r6, r6
 80029e8:	461a      	mov	r2, r3
 80029ea:	4623      	mov	r3, r4
 80029ec:	f7fd fc58 	bl	80002a0 <__aeabi_uldivmod>
 80029f0:	4603      	mov	r3, r0
 80029f2:	460c      	mov	r4, r1
 80029f4:	461a      	mov	r2, r3
 80029f6:	4b8b      	ldr	r3, [pc, #556]	; (8002c24 <UART_SetConfig+0x384>)
 80029f8:	fba3 1302 	umull	r1, r3, r3, r2
 80029fc:	095b      	lsrs	r3, r3, #5
 80029fe:	2164      	movs	r1, #100	; 0x64
 8002a00:	fb01 f303 	mul.w	r3, r1, r3
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	3332      	adds	r3, #50	; 0x32
 8002a0a:	4a86      	ldr	r2, [pc, #536]	; (8002c24 <UART_SetConfig+0x384>)
 8002a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a10:	095b      	lsrs	r3, r3, #5
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a18:	4498      	add	r8, r3
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	461d      	mov	r5, r3
 8002a1e:	f04f 0600 	mov.w	r6, #0
 8002a22:	46a9      	mov	r9, r5
 8002a24:	46b2      	mov	sl, r6
 8002a26:	eb19 0309 	adds.w	r3, r9, r9
 8002a2a:	eb4a 040a 	adc.w	r4, sl, sl
 8002a2e:	4699      	mov	r9, r3
 8002a30:	46a2      	mov	sl, r4
 8002a32:	eb19 0905 	adds.w	r9, r9, r5
 8002a36:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a3a:	f04f 0100 	mov.w	r1, #0
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a4e:	4689      	mov	r9, r1
 8002a50:	4692      	mov	sl, r2
 8002a52:	eb19 0005 	adds.w	r0, r9, r5
 8002a56:	eb4a 0106 	adc.w	r1, sl, r6
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	461d      	mov	r5, r3
 8002a60:	f04f 0600 	mov.w	r6, #0
 8002a64:	196b      	adds	r3, r5, r5
 8002a66:	eb46 0406 	adc.w	r4, r6, r6
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4623      	mov	r3, r4
 8002a6e:	f7fd fc17 	bl	80002a0 <__aeabi_uldivmod>
 8002a72:	4603      	mov	r3, r0
 8002a74:	460c      	mov	r4, r1
 8002a76:	461a      	mov	r2, r3
 8002a78:	4b6a      	ldr	r3, [pc, #424]	; (8002c24 <UART_SetConfig+0x384>)
 8002a7a:	fba3 1302 	umull	r1, r3, r3, r2
 8002a7e:	095b      	lsrs	r3, r3, #5
 8002a80:	2164      	movs	r1, #100	; 0x64
 8002a82:	fb01 f303 	mul.w	r3, r1, r3
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	3332      	adds	r3, #50	; 0x32
 8002a8c:	4a65      	ldr	r2, [pc, #404]	; (8002c24 <UART_SetConfig+0x384>)
 8002a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a92:	095b      	lsrs	r3, r3, #5
 8002a94:	f003 0207 	and.w	r2, r3, #7
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4442      	add	r2, r8
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	e26f      	b.n	8002f82 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002aa2:	f7ff fcff 	bl	80024a4 <HAL_RCC_GetPCLK1Freq>
 8002aa6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	461d      	mov	r5, r3
 8002aac:	f04f 0600 	mov.w	r6, #0
 8002ab0:	46a8      	mov	r8, r5
 8002ab2:	46b1      	mov	r9, r6
 8002ab4:	eb18 0308 	adds.w	r3, r8, r8
 8002ab8:	eb49 0409 	adc.w	r4, r9, r9
 8002abc:	4698      	mov	r8, r3
 8002abe:	46a1      	mov	r9, r4
 8002ac0:	eb18 0805 	adds.w	r8, r8, r5
 8002ac4:	eb49 0906 	adc.w	r9, r9, r6
 8002ac8:	f04f 0100 	mov.w	r1, #0
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002ad4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002ad8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002adc:	4688      	mov	r8, r1
 8002ade:	4691      	mov	r9, r2
 8002ae0:	eb18 0005 	adds.w	r0, r8, r5
 8002ae4:	eb49 0106 	adc.w	r1, r9, r6
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	461d      	mov	r5, r3
 8002aee:	f04f 0600 	mov.w	r6, #0
 8002af2:	196b      	adds	r3, r5, r5
 8002af4:	eb46 0406 	adc.w	r4, r6, r6
 8002af8:	461a      	mov	r2, r3
 8002afa:	4623      	mov	r3, r4
 8002afc:	f7fd fbd0 	bl	80002a0 <__aeabi_uldivmod>
 8002b00:	4603      	mov	r3, r0
 8002b02:	460c      	mov	r4, r1
 8002b04:	461a      	mov	r2, r3
 8002b06:	4b47      	ldr	r3, [pc, #284]	; (8002c24 <UART_SetConfig+0x384>)
 8002b08:	fba3 2302 	umull	r2, r3, r3, r2
 8002b0c:	095b      	lsrs	r3, r3, #5
 8002b0e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	461d      	mov	r5, r3
 8002b16:	f04f 0600 	mov.w	r6, #0
 8002b1a:	46a9      	mov	r9, r5
 8002b1c:	46b2      	mov	sl, r6
 8002b1e:	eb19 0309 	adds.w	r3, r9, r9
 8002b22:	eb4a 040a 	adc.w	r4, sl, sl
 8002b26:	4699      	mov	r9, r3
 8002b28:	46a2      	mov	sl, r4
 8002b2a:	eb19 0905 	adds.w	r9, r9, r5
 8002b2e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002b32:	f04f 0100 	mov.w	r1, #0
 8002b36:	f04f 0200 	mov.w	r2, #0
 8002b3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b46:	4689      	mov	r9, r1
 8002b48:	4692      	mov	sl, r2
 8002b4a:	eb19 0005 	adds.w	r0, r9, r5
 8002b4e:	eb4a 0106 	adc.w	r1, sl, r6
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	461d      	mov	r5, r3
 8002b58:	f04f 0600 	mov.w	r6, #0
 8002b5c:	196b      	adds	r3, r5, r5
 8002b5e:	eb46 0406 	adc.w	r4, r6, r6
 8002b62:	461a      	mov	r2, r3
 8002b64:	4623      	mov	r3, r4
 8002b66:	f7fd fb9b 	bl	80002a0 <__aeabi_uldivmod>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	460c      	mov	r4, r1
 8002b6e:	461a      	mov	r2, r3
 8002b70:	4b2c      	ldr	r3, [pc, #176]	; (8002c24 <UART_SetConfig+0x384>)
 8002b72:	fba3 1302 	umull	r1, r3, r3, r2
 8002b76:	095b      	lsrs	r3, r3, #5
 8002b78:	2164      	movs	r1, #100	; 0x64
 8002b7a:	fb01 f303 	mul.w	r3, r1, r3
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	3332      	adds	r3, #50	; 0x32
 8002b84:	4a27      	ldr	r2, [pc, #156]	; (8002c24 <UART_SetConfig+0x384>)
 8002b86:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b92:	4498      	add	r8, r3
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	461d      	mov	r5, r3
 8002b98:	f04f 0600 	mov.w	r6, #0
 8002b9c:	46a9      	mov	r9, r5
 8002b9e:	46b2      	mov	sl, r6
 8002ba0:	eb19 0309 	adds.w	r3, r9, r9
 8002ba4:	eb4a 040a 	adc.w	r4, sl, sl
 8002ba8:	4699      	mov	r9, r3
 8002baa:	46a2      	mov	sl, r4
 8002bac:	eb19 0905 	adds.w	r9, r9, r5
 8002bb0:	eb4a 0a06 	adc.w	sl, sl, r6
 8002bb4:	f04f 0100 	mov.w	r1, #0
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bc0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002bc4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002bc8:	4689      	mov	r9, r1
 8002bca:	4692      	mov	sl, r2
 8002bcc:	eb19 0005 	adds.w	r0, r9, r5
 8002bd0:	eb4a 0106 	adc.w	r1, sl, r6
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	461d      	mov	r5, r3
 8002bda:	f04f 0600 	mov.w	r6, #0
 8002bde:	196b      	adds	r3, r5, r5
 8002be0:	eb46 0406 	adc.w	r4, r6, r6
 8002be4:	461a      	mov	r2, r3
 8002be6:	4623      	mov	r3, r4
 8002be8:	f7fd fb5a 	bl	80002a0 <__aeabi_uldivmod>
 8002bec:	4603      	mov	r3, r0
 8002bee:	460c      	mov	r4, r1
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4b0c      	ldr	r3, [pc, #48]	; (8002c24 <UART_SetConfig+0x384>)
 8002bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf8:	095b      	lsrs	r3, r3, #5
 8002bfa:	2164      	movs	r1, #100	; 0x64
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	3332      	adds	r3, #50	; 0x32
 8002c06:	4a07      	ldr	r2, [pc, #28]	; (8002c24 <UART_SetConfig+0x384>)
 8002c08:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0c:	095b      	lsrs	r3, r3, #5
 8002c0e:	f003 0207 	and.w	r2, r3, #7
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4442      	add	r2, r8
 8002c18:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002c1a:	e1b2      	b.n	8002f82 <UART_SetConfig+0x6e2>
 8002c1c:	40011000 	.word	0x40011000
 8002c20:	40011400 	.word	0x40011400
 8002c24:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4ad7      	ldr	r2, [pc, #860]	; (8002f8c <UART_SetConfig+0x6ec>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d005      	beq.n	8002c3e <UART_SetConfig+0x39e>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4ad6      	ldr	r2, [pc, #856]	; (8002f90 <UART_SetConfig+0x6f0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	f040 80d1 	bne.w	8002de0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c3e:	f7ff fc45 	bl	80024cc <HAL_RCC_GetPCLK2Freq>
 8002c42:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	469a      	mov	sl, r3
 8002c48:	f04f 0b00 	mov.w	fp, #0
 8002c4c:	46d0      	mov	r8, sl
 8002c4e:	46d9      	mov	r9, fp
 8002c50:	eb18 0308 	adds.w	r3, r8, r8
 8002c54:	eb49 0409 	adc.w	r4, r9, r9
 8002c58:	4698      	mov	r8, r3
 8002c5a:	46a1      	mov	r9, r4
 8002c5c:	eb18 080a 	adds.w	r8, r8, sl
 8002c60:	eb49 090b 	adc.w	r9, r9, fp
 8002c64:	f04f 0100 	mov.w	r1, #0
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c70:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c74:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002c78:	4688      	mov	r8, r1
 8002c7a:	4691      	mov	r9, r2
 8002c7c:	eb1a 0508 	adds.w	r5, sl, r8
 8002c80:	eb4b 0609 	adc.w	r6, fp, r9
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	4619      	mov	r1, r3
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	f04f 0400 	mov.w	r4, #0
 8002c96:	0094      	lsls	r4, r2, #2
 8002c98:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c9c:	008b      	lsls	r3, r1, #2
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	4623      	mov	r3, r4
 8002ca2:	4628      	mov	r0, r5
 8002ca4:	4631      	mov	r1, r6
 8002ca6:	f7fd fafb 	bl	80002a0 <__aeabi_uldivmod>
 8002caa:	4603      	mov	r3, r0
 8002cac:	460c      	mov	r4, r1
 8002cae:	461a      	mov	r2, r3
 8002cb0:	4bb8      	ldr	r3, [pc, #736]	; (8002f94 <UART_SetConfig+0x6f4>)
 8002cb2:	fba3 2302 	umull	r2, r3, r3, r2
 8002cb6:	095b      	lsrs	r3, r3, #5
 8002cb8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	469b      	mov	fp, r3
 8002cc0:	f04f 0c00 	mov.w	ip, #0
 8002cc4:	46d9      	mov	r9, fp
 8002cc6:	46e2      	mov	sl, ip
 8002cc8:	eb19 0309 	adds.w	r3, r9, r9
 8002ccc:	eb4a 040a 	adc.w	r4, sl, sl
 8002cd0:	4699      	mov	r9, r3
 8002cd2:	46a2      	mov	sl, r4
 8002cd4:	eb19 090b 	adds.w	r9, r9, fp
 8002cd8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002cdc:	f04f 0100 	mov.w	r1, #0
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ce8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002cf0:	4689      	mov	r9, r1
 8002cf2:	4692      	mov	sl, r2
 8002cf4:	eb1b 0509 	adds.w	r5, fp, r9
 8002cf8:	eb4c 060a 	adc.w	r6, ip, sl
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	4619      	mov	r1, r3
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	f04f 0400 	mov.w	r4, #0
 8002d0e:	0094      	lsls	r4, r2, #2
 8002d10:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d14:	008b      	lsls	r3, r1, #2
 8002d16:	461a      	mov	r2, r3
 8002d18:	4623      	mov	r3, r4
 8002d1a:	4628      	mov	r0, r5
 8002d1c:	4631      	mov	r1, r6
 8002d1e:	f7fd fabf 	bl	80002a0 <__aeabi_uldivmod>
 8002d22:	4603      	mov	r3, r0
 8002d24:	460c      	mov	r4, r1
 8002d26:	461a      	mov	r2, r3
 8002d28:	4b9a      	ldr	r3, [pc, #616]	; (8002f94 <UART_SetConfig+0x6f4>)
 8002d2a:	fba3 1302 	umull	r1, r3, r3, r2
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	2164      	movs	r1, #100	; 0x64
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	3332      	adds	r3, #50	; 0x32
 8002d3c:	4a95      	ldr	r2, [pc, #596]	; (8002f94 <UART_SetConfig+0x6f4>)
 8002d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d42:	095b      	lsrs	r3, r3, #5
 8002d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d48:	4498      	add	r8, r3
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	469b      	mov	fp, r3
 8002d4e:	f04f 0c00 	mov.w	ip, #0
 8002d52:	46d9      	mov	r9, fp
 8002d54:	46e2      	mov	sl, ip
 8002d56:	eb19 0309 	adds.w	r3, r9, r9
 8002d5a:	eb4a 040a 	adc.w	r4, sl, sl
 8002d5e:	4699      	mov	r9, r3
 8002d60:	46a2      	mov	sl, r4
 8002d62:	eb19 090b 	adds.w	r9, r9, fp
 8002d66:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d6a:	f04f 0100 	mov.w	r1, #0
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d7e:	4689      	mov	r9, r1
 8002d80:	4692      	mov	sl, r2
 8002d82:	eb1b 0509 	adds.w	r5, fp, r9
 8002d86:	eb4c 060a 	adc.w	r6, ip, sl
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4619      	mov	r1, r3
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	f04f 0400 	mov.w	r4, #0
 8002d9c:	0094      	lsls	r4, r2, #2
 8002d9e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002da2:	008b      	lsls	r3, r1, #2
 8002da4:	461a      	mov	r2, r3
 8002da6:	4623      	mov	r3, r4
 8002da8:	4628      	mov	r0, r5
 8002daa:	4631      	mov	r1, r6
 8002dac:	f7fd fa78 	bl	80002a0 <__aeabi_uldivmod>
 8002db0:	4603      	mov	r3, r0
 8002db2:	460c      	mov	r4, r1
 8002db4:	461a      	mov	r2, r3
 8002db6:	4b77      	ldr	r3, [pc, #476]	; (8002f94 <UART_SetConfig+0x6f4>)
 8002db8:	fba3 1302 	umull	r1, r3, r3, r2
 8002dbc:	095b      	lsrs	r3, r3, #5
 8002dbe:	2164      	movs	r1, #100	; 0x64
 8002dc0:	fb01 f303 	mul.w	r3, r1, r3
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	011b      	lsls	r3, r3, #4
 8002dc8:	3332      	adds	r3, #50	; 0x32
 8002dca:	4a72      	ldr	r2, [pc, #456]	; (8002f94 <UART_SetConfig+0x6f4>)
 8002dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd0:	095b      	lsrs	r3, r3, #5
 8002dd2:	f003 020f 	and.w	r2, r3, #15
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4442      	add	r2, r8
 8002ddc:	609a      	str	r2, [r3, #8]
 8002dde:	e0d0      	b.n	8002f82 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002de0:	f7ff fb60 	bl	80024a4 <HAL_RCC_GetPCLK1Freq>
 8002de4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	469a      	mov	sl, r3
 8002dea:	f04f 0b00 	mov.w	fp, #0
 8002dee:	46d0      	mov	r8, sl
 8002df0:	46d9      	mov	r9, fp
 8002df2:	eb18 0308 	adds.w	r3, r8, r8
 8002df6:	eb49 0409 	adc.w	r4, r9, r9
 8002dfa:	4698      	mov	r8, r3
 8002dfc:	46a1      	mov	r9, r4
 8002dfe:	eb18 080a 	adds.w	r8, r8, sl
 8002e02:	eb49 090b 	adc.w	r9, r9, fp
 8002e06:	f04f 0100 	mov.w	r1, #0
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e12:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e16:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e1a:	4688      	mov	r8, r1
 8002e1c:	4691      	mov	r9, r2
 8002e1e:	eb1a 0508 	adds.w	r5, sl, r8
 8002e22:	eb4b 0609 	adc.w	r6, fp, r9
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	f04f 0400 	mov.w	r4, #0
 8002e38:	0094      	lsls	r4, r2, #2
 8002e3a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e3e:	008b      	lsls	r3, r1, #2
 8002e40:	461a      	mov	r2, r3
 8002e42:	4623      	mov	r3, r4
 8002e44:	4628      	mov	r0, r5
 8002e46:	4631      	mov	r1, r6
 8002e48:	f7fd fa2a 	bl	80002a0 <__aeabi_uldivmod>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	460c      	mov	r4, r1
 8002e50:	461a      	mov	r2, r3
 8002e52:	4b50      	ldr	r3, [pc, #320]	; (8002f94 <UART_SetConfig+0x6f4>)
 8002e54:	fba3 2302 	umull	r2, r3, r3, r2
 8002e58:	095b      	lsrs	r3, r3, #5
 8002e5a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	469b      	mov	fp, r3
 8002e62:	f04f 0c00 	mov.w	ip, #0
 8002e66:	46d9      	mov	r9, fp
 8002e68:	46e2      	mov	sl, ip
 8002e6a:	eb19 0309 	adds.w	r3, r9, r9
 8002e6e:	eb4a 040a 	adc.w	r4, sl, sl
 8002e72:	4699      	mov	r9, r3
 8002e74:	46a2      	mov	sl, r4
 8002e76:	eb19 090b 	adds.w	r9, r9, fp
 8002e7a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002e7e:	f04f 0100 	mov.w	r1, #0
 8002e82:	f04f 0200 	mov.w	r2, #0
 8002e86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e92:	4689      	mov	r9, r1
 8002e94:	4692      	mov	sl, r2
 8002e96:	eb1b 0509 	adds.w	r5, fp, r9
 8002e9a:	eb4c 060a 	adc.w	r6, ip, sl
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	f04f 0400 	mov.w	r4, #0
 8002eb0:	0094      	lsls	r4, r2, #2
 8002eb2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002eb6:	008b      	lsls	r3, r1, #2
 8002eb8:	461a      	mov	r2, r3
 8002eba:	4623      	mov	r3, r4
 8002ebc:	4628      	mov	r0, r5
 8002ebe:	4631      	mov	r1, r6
 8002ec0:	f7fd f9ee 	bl	80002a0 <__aeabi_uldivmod>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	460c      	mov	r4, r1
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4b32      	ldr	r3, [pc, #200]	; (8002f94 <UART_SetConfig+0x6f4>)
 8002ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ed0:	095b      	lsrs	r3, r3, #5
 8002ed2:	2164      	movs	r1, #100	; 0x64
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	3332      	adds	r3, #50	; 0x32
 8002ede:	4a2d      	ldr	r2, [pc, #180]	; (8002f94 <UART_SetConfig+0x6f4>)
 8002ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eea:	4498      	add	r8, r3
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	469b      	mov	fp, r3
 8002ef0:	f04f 0c00 	mov.w	ip, #0
 8002ef4:	46d9      	mov	r9, fp
 8002ef6:	46e2      	mov	sl, ip
 8002ef8:	eb19 0309 	adds.w	r3, r9, r9
 8002efc:	eb4a 040a 	adc.w	r4, sl, sl
 8002f00:	4699      	mov	r9, r3
 8002f02:	46a2      	mov	sl, r4
 8002f04:	eb19 090b 	adds.w	r9, r9, fp
 8002f08:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f0c:	f04f 0100 	mov.w	r1, #0
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f20:	4689      	mov	r9, r1
 8002f22:	4692      	mov	sl, r2
 8002f24:	eb1b 0509 	adds.w	r5, fp, r9
 8002f28:	eb4c 060a 	adc.w	r6, ip, sl
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	4619      	mov	r1, r3
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	f04f 0300 	mov.w	r3, #0
 8002f3a:	f04f 0400 	mov.w	r4, #0
 8002f3e:	0094      	lsls	r4, r2, #2
 8002f40:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f44:	008b      	lsls	r3, r1, #2
 8002f46:	461a      	mov	r2, r3
 8002f48:	4623      	mov	r3, r4
 8002f4a:	4628      	mov	r0, r5
 8002f4c:	4631      	mov	r1, r6
 8002f4e:	f7fd f9a7 	bl	80002a0 <__aeabi_uldivmod>
 8002f52:	4603      	mov	r3, r0
 8002f54:	460c      	mov	r4, r1
 8002f56:	461a      	mov	r2, r3
 8002f58:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <UART_SetConfig+0x6f4>)
 8002f5a:	fba3 1302 	umull	r1, r3, r3, r2
 8002f5e:	095b      	lsrs	r3, r3, #5
 8002f60:	2164      	movs	r1, #100	; 0x64
 8002f62:	fb01 f303 	mul.w	r3, r1, r3
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	3332      	adds	r3, #50	; 0x32
 8002f6c:	4a09      	ldr	r2, [pc, #36]	; (8002f94 <UART_SetConfig+0x6f4>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	095b      	lsrs	r3, r3, #5
 8002f74:	f003 020f 	and.w	r2, r3, #15
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4442      	add	r2, r8
 8002f7e:	609a      	str	r2, [r3, #8]
}
 8002f80:	e7ff      	b.n	8002f82 <UART_SetConfig+0x6e2>
 8002f82:	bf00      	nop
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f8c:	40011000 	.word	0x40011000
 8002f90:	40011400 	.word	0x40011400
 8002f94:	51eb851f 	.word	0x51eb851f

08002f98 <__errno>:
 8002f98:	4b01      	ldr	r3, [pc, #4]	; (8002fa0 <__errno+0x8>)
 8002f9a:	6818      	ldr	r0, [r3, #0]
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	20000014 	.word	0x20000014

08002fa4 <__libc_init_array>:
 8002fa4:	b570      	push	{r4, r5, r6, lr}
 8002fa6:	4e0d      	ldr	r6, [pc, #52]	; (8002fdc <__libc_init_array+0x38>)
 8002fa8:	4c0d      	ldr	r4, [pc, #52]	; (8002fe0 <__libc_init_array+0x3c>)
 8002faa:	1ba4      	subs	r4, r4, r6
 8002fac:	10a4      	asrs	r4, r4, #2
 8002fae:	2500      	movs	r5, #0
 8002fb0:	42a5      	cmp	r5, r4
 8002fb2:	d109      	bne.n	8002fc8 <__libc_init_array+0x24>
 8002fb4:	4e0b      	ldr	r6, [pc, #44]	; (8002fe4 <__libc_init_array+0x40>)
 8002fb6:	4c0c      	ldr	r4, [pc, #48]	; (8002fe8 <__libc_init_array+0x44>)
 8002fb8:	f000 fc26 	bl	8003808 <_init>
 8002fbc:	1ba4      	subs	r4, r4, r6
 8002fbe:	10a4      	asrs	r4, r4, #2
 8002fc0:	2500      	movs	r5, #0
 8002fc2:	42a5      	cmp	r5, r4
 8002fc4:	d105      	bne.n	8002fd2 <__libc_init_array+0x2e>
 8002fc6:	bd70      	pop	{r4, r5, r6, pc}
 8002fc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fcc:	4798      	blx	r3
 8002fce:	3501      	adds	r5, #1
 8002fd0:	e7ee      	b.n	8002fb0 <__libc_init_array+0xc>
 8002fd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fd6:	4798      	blx	r3
 8002fd8:	3501      	adds	r5, #1
 8002fda:	e7f2      	b.n	8002fc2 <__libc_init_array+0x1e>
 8002fdc:	08003a08 	.word	0x08003a08
 8002fe0:	08003a08 	.word	0x08003a08
 8002fe4:	08003a08 	.word	0x08003a08
 8002fe8:	08003a0c 	.word	0x08003a0c

08002fec <memset>:
 8002fec:	4402      	add	r2, r0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d100      	bne.n	8002ff6 <memset+0xa>
 8002ff4:	4770      	bx	lr
 8002ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8002ffa:	e7f9      	b.n	8002ff0 <memset+0x4>

08002ffc <_vsiprintf_r>:
 8002ffc:	b500      	push	{lr}
 8002ffe:	b09b      	sub	sp, #108	; 0x6c
 8003000:	9100      	str	r1, [sp, #0]
 8003002:	9104      	str	r1, [sp, #16]
 8003004:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003008:	9105      	str	r1, [sp, #20]
 800300a:	9102      	str	r1, [sp, #8]
 800300c:	4905      	ldr	r1, [pc, #20]	; (8003024 <_vsiprintf_r+0x28>)
 800300e:	9103      	str	r1, [sp, #12]
 8003010:	4669      	mov	r1, sp
 8003012:	f000 f86d 	bl	80030f0 <_svfiprintf_r>
 8003016:	9b00      	ldr	r3, [sp, #0]
 8003018:	2200      	movs	r2, #0
 800301a:	701a      	strb	r2, [r3, #0]
 800301c:	b01b      	add	sp, #108	; 0x6c
 800301e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003022:	bf00      	nop
 8003024:	ffff0208 	.word	0xffff0208

08003028 <vsiprintf>:
 8003028:	4613      	mov	r3, r2
 800302a:	460a      	mov	r2, r1
 800302c:	4601      	mov	r1, r0
 800302e:	4802      	ldr	r0, [pc, #8]	; (8003038 <vsiprintf+0x10>)
 8003030:	6800      	ldr	r0, [r0, #0]
 8003032:	f7ff bfe3 	b.w	8002ffc <_vsiprintf_r>
 8003036:	bf00      	nop
 8003038:	20000014 	.word	0x20000014

0800303c <__ssputs_r>:
 800303c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003040:	688e      	ldr	r6, [r1, #8]
 8003042:	429e      	cmp	r6, r3
 8003044:	4682      	mov	sl, r0
 8003046:	460c      	mov	r4, r1
 8003048:	4690      	mov	r8, r2
 800304a:	4699      	mov	r9, r3
 800304c:	d837      	bhi.n	80030be <__ssputs_r+0x82>
 800304e:	898a      	ldrh	r2, [r1, #12]
 8003050:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003054:	d031      	beq.n	80030ba <__ssputs_r+0x7e>
 8003056:	6825      	ldr	r5, [r4, #0]
 8003058:	6909      	ldr	r1, [r1, #16]
 800305a:	1a6f      	subs	r7, r5, r1
 800305c:	6965      	ldr	r5, [r4, #20]
 800305e:	2302      	movs	r3, #2
 8003060:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003064:	fb95 f5f3 	sdiv	r5, r5, r3
 8003068:	f109 0301 	add.w	r3, r9, #1
 800306c:	443b      	add	r3, r7
 800306e:	429d      	cmp	r5, r3
 8003070:	bf38      	it	cc
 8003072:	461d      	movcc	r5, r3
 8003074:	0553      	lsls	r3, r2, #21
 8003076:	d530      	bpl.n	80030da <__ssputs_r+0x9e>
 8003078:	4629      	mov	r1, r5
 800307a:	f000 fb2b 	bl	80036d4 <_malloc_r>
 800307e:	4606      	mov	r6, r0
 8003080:	b950      	cbnz	r0, 8003098 <__ssputs_r+0x5c>
 8003082:	230c      	movs	r3, #12
 8003084:	f8ca 3000 	str.w	r3, [sl]
 8003088:	89a3      	ldrh	r3, [r4, #12]
 800308a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800308e:	81a3      	strh	r3, [r4, #12]
 8003090:	f04f 30ff 	mov.w	r0, #4294967295
 8003094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003098:	463a      	mov	r2, r7
 800309a:	6921      	ldr	r1, [r4, #16]
 800309c:	f000 faa8 	bl	80035f0 <memcpy>
 80030a0:	89a3      	ldrh	r3, [r4, #12]
 80030a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80030a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030aa:	81a3      	strh	r3, [r4, #12]
 80030ac:	6126      	str	r6, [r4, #16]
 80030ae:	6165      	str	r5, [r4, #20]
 80030b0:	443e      	add	r6, r7
 80030b2:	1bed      	subs	r5, r5, r7
 80030b4:	6026      	str	r6, [r4, #0]
 80030b6:	60a5      	str	r5, [r4, #8]
 80030b8:	464e      	mov	r6, r9
 80030ba:	454e      	cmp	r6, r9
 80030bc:	d900      	bls.n	80030c0 <__ssputs_r+0x84>
 80030be:	464e      	mov	r6, r9
 80030c0:	4632      	mov	r2, r6
 80030c2:	4641      	mov	r1, r8
 80030c4:	6820      	ldr	r0, [r4, #0]
 80030c6:	f000 fa9e 	bl	8003606 <memmove>
 80030ca:	68a3      	ldr	r3, [r4, #8]
 80030cc:	1b9b      	subs	r3, r3, r6
 80030ce:	60a3      	str	r3, [r4, #8]
 80030d0:	6823      	ldr	r3, [r4, #0]
 80030d2:	441e      	add	r6, r3
 80030d4:	6026      	str	r6, [r4, #0]
 80030d6:	2000      	movs	r0, #0
 80030d8:	e7dc      	b.n	8003094 <__ssputs_r+0x58>
 80030da:	462a      	mov	r2, r5
 80030dc:	f000 fb54 	bl	8003788 <_realloc_r>
 80030e0:	4606      	mov	r6, r0
 80030e2:	2800      	cmp	r0, #0
 80030e4:	d1e2      	bne.n	80030ac <__ssputs_r+0x70>
 80030e6:	6921      	ldr	r1, [r4, #16]
 80030e8:	4650      	mov	r0, sl
 80030ea:	f000 faa5 	bl	8003638 <_free_r>
 80030ee:	e7c8      	b.n	8003082 <__ssputs_r+0x46>

080030f0 <_svfiprintf_r>:
 80030f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030f4:	461d      	mov	r5, r3
 80030f6:	898b      	ldrh	r3, [r1, #12]
 80030f8:	061f      	lsls	r7, r3, #24
 80030fa:	b09d      	sub	sp, #116	; 0x74
 80030fc:	4680      	mov	r8, r0
 80030fe:	460c      	mov	r4, r1
 8003100:	4616      	mov	r6, r2
 8003102:	d50f      	bpl.n	8003124 <_svfiprintf_r+0x34>
 8003104:	690b      	ldr	r3, [r1, #16]
 8003106:	b96b      	cbnz	r3, 8003124 <_svfiprintf_r+0x34>
 8003108:	2140      	movs	r1, #64	; 0x40
 800310a:	f000 fae3 	bl	80036d4 <_malloc_r>
 800310e:	6020      	str	r0, [r4, #0]
 8003110:	6120      	str	r0, [r4, #16]
 8003112:	b928      	cbnz	r0, 8003120 <_svfiprintf_r+0x30>
 8003114:	230c      	movs	r3, #12
 8003116:	f8c8 3000 	str.w	r3, [r8]
 800311a:	f04f 30ff 	mov.w	r0, #4294967295
 800311e:	e0c8      	b.n	80032b2 <_svfiprintf_r+0x1c2>
 8003120:	2340      	movs	r3, #64	; 0x40
 8003122:	6163      	str	r3, [r4, #20]
 8003124:	2300      	movs	r3, #0
 8003126:	9309      	str	r3, [sp, #36]	; 0x24
 8003128:	2320      	movs	r3, #32
 800312a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800312e:	2330      	movs	r3, #48	; 0x30
 8003130:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003134:	9503      	str	r5, [sp, #12]
 8003136:	f04f 0b01 	mov.w	fp, #1
 800313a:	4637      	mov	r7, r6
 800313c:	463d      	mov	r5, r7
 800313e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003142:	b10b      	cbz	r3, 8003148 <_svfiprintf_r+0x58>
 8003144:	2b25      	cmp	r3, #37	; 0x25
 8003146:	d13e      	bne.n	80031c6 <_svfiprintf_r+0xd6>
 8003148:	ebb7 0a06 	subs.w	sl, r7, r6
 800314c:	d00b      	beq.n	8003166 <_svfiprintf_r+0x76>
 800314e:	4653      	mov	r3, sl
 8003150:	4632      	mov	r2, r6
 8003152:	4621      	mov	r1, r4
 8003154:	4640      	mov	r0, r8
 8003156:	f7ff ff71 	bl	800303c <__ssputs_r>
 800315a:	3001      	adds	r0, #1
 800315c:	f000 80a4 	beq.w	80032a8 <_svfiprintf_r+0x1b8>
 8003160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003162:	4453      	add	r3, sl
 8003164:	9309      	str	r3, [sp, #36]	; 0x24
 8003166:	783b      	ldrb	r3, [r7, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 809d 	beq.w	80032a8 <_svfiprintf_r+0x1b8>
 800316e:	2300      	movs	r3, #0
 8003170:	f04f 32ff 	mov.w	r2, #4294967295
 8003174:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003178:	9304      	str	r3, [sp, #16]
 800317a:	9307      	str	r3, [sp, #28]
 800317c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003180:	931a      	str	r3, [sp, #104]	; 0x68
 8003182:	462f      	mov	r7, r5
 8003184:	2205      	movs	r2, #5
 8003186:	f817 1b01 	ldrb.w	r1, [r7], #1
 800318a:	4850      	ldr	r0, [pc, #320]	; (80032cc <_svfiprintf_r+0x1dc>)
 800318c:	f7fd f838 	bl	8000200 <memchr>
 8003190:	9b04      	ldr	r3, [sp, #16]
 8003192:	b9d0      	cbnz	r0, 80031ca <_svfiprintf_r+0xda>
 8003194:	06d9      	lsls	r1, r3, #27
 8003196:	bf44      	itt	mi
 8003198:	2220      	movmi	r2, #32
 800319a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800319e:	071a      	lsls	r2, r3, #28
 80031a0:	bf44      	itt	mi
 80031a2:	222b      	movmi	r2, #43	; 0x2b
 80031a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80031a8:	782a      	ldrb	r2, [r5, #0]
 80031aa:	2a2a      	cmp	r2, #42	; 0x2a
 80031ac:	d015      	beq.n	80031da <_svfiprintf_r+0xea>
 80031ae:	9a07      	ldr	r2, [sp, #28]
 80031b0:	462f      	mov	r7, r5
 80031b2:	2000      	movs	r0, #0
 80031b4:	250a      	movs	r5, #10
 80031b6:	4639      	mov	r1, r7
 80031b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031bc:	3b30      	subs	r3, #48	; 0x30
 80031be:	2b09      	cmp	r3, #9
 80031c0:	d94d      	bls.n	800325e <_svfiprintf_r+0x16e>
 80031c2:	b1b8      	cbz	r0, 80031f4 <_svfiprintf_r+0x104>
 80031c4:	e00f      	b.n	80031e6 <_svfiprintf_r+0xf6>
 80031c6:	462f      	mov	r7, r5
 80031c8:	e7b8      	b.n	800313c <_svfiprintf_r+0x4c>
 80031ca:	4a40      	ldr	r2, [pc, #256]	; (80032cc <_svfiprintf_r+0x1dc>)
 80031cc:	1a80      	subs	r0, r0, r2
 80031ce:	fa0b f000 	lsl.w	r0, fp, r0
 80031d2:	4318      	orrs	r0, r3
 80031d4:	9004      	str	r0, [sp, #16]
 80031d6:	463d      	mov	r5, r7
 80031d8:	e7d3      	b.n	8003182 <_svfiprintf_r+0x92>
 80031da:	9a03      	ldr	r2, [sp, #12]
 80031dc:	1d11      	adds	r1, r2, #4
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	9103      	str	r1, [sp, #12]
 80031e2:	2a00      	cmp	r2, #0
 80031e4:	db01      	blt.n	80031ea <_svfiprintf_r+0xfa>
 80031e6:	9207      	str	r2, [sp, #28]
 80031e8:	e004      	b.n	80031f4 <_svfiprintf_r+0x104>
 80031ea:	4252      	negs	r2, r2
 80031ec:	f043 0302 	orr.w	r3, r3, #2
 80031f0:	9207      	str	r2, [sp, #28]
 80031f2:	9304      	str	r3, [sp, #16]
 80031f4:	783b      	ldrb	r3, [r7, #0]
 80031f6:	2b2e      	cmp	r3, #46	; 0x2e
 80031f8:	d10c      	bne.n	8003214 <_svfiprintf_r+0x124>
 80031fa:	787b      	ldrb	r3, [r7, #1]
 80031fc:	2b2a      	cmp	r3, #42	; 0x2a
 80031fe:	d133      	bne.n	8003268 <_svfiprintf_r+0x178>
 8003200:	9b03      	ldr	r3, [sp, #12]
 8003202:	1d1a      	adds	r2, r3, #4
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	9203      	str	r2, [sp, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	bfb8      	it	lt
 800320c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003210:	3702      	adds	r7, #2
 8003212:	9305      	str	r3, [sp, #20]
 8003214:	4d2e      	ldr	r5, [pc, #184]	; (80032d0 <_svfiprintf_r+0x1e0>)
 8003216:	7839      	ldrb	r1, [r7, #0]
 8003218:	2203      	movs	r2, #3
 800321a:	4628      	mov	r0, r5
 800321c:	f7fc fff0 	bl	8000200 <memchr>
 8003220:	b138      	cbz	r0, 8003232 <_svfiprintf_r+0x142>
 8003222:	2340      	movs	r3, #64	; 0x40
 8003224:	1b40      	subs	r0, r0, r5
 8003226:	fa03 f000 	lsl.w	r0, r3, r0
 800322a:	9b04      	ldr	r3, [sp, #16]
 800322c:	4303      	orrs	r3, r0
 800322e:	3701      	adds	r7, #1
 8003230:	9304      	str	r3, [sp, #16]
 8003232:	7839      	ldrb	r1, [r7, #0]
 8003234:	4827      	ldr	r0, [pc, #156]	; (80032d4 <_svfiprintf_r+0x1e4>)
 8003236:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800323a:	2206      	movs	r2, #6
 800323c:	1c7e      	adds	r6, r7, #1
 800323e:	f7fc ffdf 	bl	8000200 <memchr>
 8003242:	2800      	cmp	r0, #0
 8003244:	d038      	beq.n	80032b8 <_svfiprintf_r+0x1c8>
 8003246:	4b24      	ldr	r3, [pc, #144]	; (80032d8 <_svfiprintf_r+0x1e8>)
 8003248:	bb13      	cbnz	r3, 8003290 <_svfiprintf_r+0x1a0>
 800324a:	9b03      	ldr	r3, [sp, #12]
 800324c:	3307      	adds	r3, #7
 800324e:	f023 0307 	bic.w	r3, r3, #7
 8003252:	3308      	adds	r3, #8
 8003254:	9303      	str	r3, [sp, #12]
 8003256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003258:	444b      	add	r3, r9
 800325a:	9309      	str	r3, [sp, #36]	; 0x24
 800325c:	e76d      	b.n	800313a <_svfiprintf_r+0x4a>
 800325e:	fb05 3202 	mla	r2, r5, r2, r3
 8003262:	2001      	movs	r0, #1
 8003264:	460f      	mov	r7, r1
 8003266:	e7a6      	b.n	80031b6 <_svfiprintf_r+0xc6>
 8003268:	2300      	movs	r3, #0
 800326a:	3701      	adds	r7, #1
 800326c:	9305      	str	r3, [sp, #20]
 800326e:	4619      	mov	r1, r3
 8003270:	250a      	movs	r5, #10
 8003272:	4638      	mov	r0, r7
 8003274:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003278:	3a30      	subs	r2, #48	; 0x30
 800327a:	2a09      	cmp	r2, #9
 800327c:	d903      	bls.n	8003286 <_svfiprintf_r+0x196>
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0c8      	beq.n	8003214 <_svfiprintf_r+0x124>
 8003282:	9105      	str	r1, [sp, #20]
 8003284:	e7c6      	b.n	8003214 <_svfiprintf_r+0x124>
 8003286:	fb05 2101 	mla	r1, r5, r1, r2
 800328a:	2301      	movs	r3, #1
 800328c:	4607      	mov	r7, r0
 800328e:	e7f0      	b.n	8003272 <_svfiprintf_r+0x182>
 8003290:	ab03      	add	r3, sp, #12
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	4622      	mov	r2, r4
 8003296:	4b11      	ldr	r3, [pc, #68]	; (80032dc <_svfiprintf_r+0x1ec>)
 8003298:	a904      	add	r1, sp, #16
 800329a:	4640      	mov	r0, r8
 800329c:	f3af 8000 	nop.w
 80032a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80032a4:	4681      	mov	r9, r0
 80032a6:	d1d6      	bne.n	8003256 <_svfiprintf_r+0x166>
 80032a8:	89a3      	ldrh	r3, [r4, #12]
 80032aa:	065b      	lsls	r3, r3, #25
 80032ac:	f53f af35 	bmi.w	800311a <_svfiprintf_r+0x2a>
 80032b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032b2:	b01d      	add	sp, #116	; 0x74
 80032b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032b8:	ab03      	add	r3, sp, #12
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	4622      	mov	r2, r4
 80032be:	4b07      	ldr	r3, [pc, #28]	; (80032dc <_svfiprintf_r+0x1ec>)
 80032c0:	a904      	add	r1, sp, #16
 80032c2:	4640      	mov	r0, r8
 80032c4:	f000 f882 	bl	80033cc <_printf_i>
 80032c8:	e7ea      	b.n	80032a0 <_svfiprintf_r+0x1b0>
 80032ca:	bf00      	nop
 80032cc:	080039cc 	.word	0x080039cc
 80032d0:	080039d2 	.word	0x080039d2
 80032d4:	080039d6 	.word	0x080039d6
 80032d8:	00000000 	.word	0x00000000
 80032dc:	0800303d 	.word	0x0800303d

080032e0 <_printf_common>:
 80032e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032e4:	4691      	mov	r9, r2
 80032e6:	461f      	mov	r7, r3
 80032e8:	688a      	ldr	r2, [r1, #8]
 80032ea:	690b      	ldr	r3, [r1, #16]
 80032ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032f0:	4293      	cmp	r3, r2
 80032f2:	bfb8      	it	lt
 80032f4:	4613      	movlt	r3, r2
 80032f6:	f8c9 3000 	str.w	r3, [r9]
 80032fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032fe:	4606      	mov	r6, r0
 8003300:	460c      	mov	r4, r1
 8003302:	b112      	cbz	r2, 800330a <_printf_common+0x2a>
 8003304:	3301      	adds	r3, #1
 8003306:	f8c9 3000 	str.w	r3, [r9]
 800330a:	6823      	ldr	r3, [r4, #0]
 800330c:	0699      	lsls	r1, r3, #26
 800330e:	bf42      	ittt	mi
 8003310:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003314:	3302      	addmi	r3, #2
 8003316:	f8c9 3000 	strmi.w	r3, [r9]
 800331a:	6825      	ldr	r5, [r4, #0]
 800331c:	f015 0506 	ands.w	r5, r5, #6
 8003320:	d107      	bne.n	8003332 <_printf_common+0x52>
 8003322:	f104 0a19 	add.w	sl, r4, #25
 8003326:	68e3      	ldr	r3, [r4, #12]
 8003328:	f8d9 2000 	ldr.w	r2, [r9]
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	42ab      	cmp	r3, r5
 8003330:	dc28      	bgt.n	8003384 <_printf_common+0xa4>
 8003332:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003336:	6822      	ldr	r2, [r4, #0]
 8003338:	3300      	adds	r3, #0
 800333a:	bf18      	it	ne
 800333c:	2301      	movne	r3, #1
 800333e:	0692      	lsls	r2, r2, #26
 8003340:	d42d      	bmi.n	800339e <_printf_common+0xbe>
 8003342:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003346:	4639      	mov	r1, r7
 8003348:	4630      	mov	r0, r6
 800334a:	47c0      	blx	r8
 800334c:	3001      	adds	r0, #1
 800334e:	d020      	beq.n	8003392 <_printf_common+0xb2>
 8003350:	6823      	ldr	r3, [r4, #0]
 8003352:	68e5      	ldr	r5, [r4, #12]
 8003354:	f8d9 2000 	ldr.w	r2, [r9]
 8003358:	f003 0306 	and.w	r3, r3, #6
 800335c:	2b04      	cmp	r3, #4
 800335e:	bf08      	it	eq
 8003360:	1aad      	subeq	r5, r5, r2
 8003362:	68a3      	ldr	r3, [r4, #8]
 8003364:	6922      	ldr	r2, [r4, #16]
 8003366:	bf0c      	ite	eq
 8003368:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800336c:	2500      	movne	r5, #0
 800336e:	4293      	cmp	r3, r2
 8003370:	bfc4      	itt	gt
 8003372:	1a9b      	subgt	r3, r3, r2
 8003374:	18ed      	addgt	r5, r5, r3
 8003376:	f04f 0900 	mov.w	r9, #0
 800337a:	341a      	adds	r4, #26
 800337c:	454d      	cmp	r5, r9
 800337e:	d11a      	bne.n	80033b6 <_printf_common+0xd6>
 8003380:	2000      	movs	r0, #0
 8003382:	e008      	b.n	8003396 <_printf_common+0xb6>
 8003384:	2301      	movs	r3, #1
 8003386:	4652      	mov	r2, sl
 8003388:	4639      	mov	r1, r7
 800338a:	4630      	mov	r0, r6
 800338c:	47c0      	blx	r8
 800338e:	3001      	adds	r0, #1
 8003390:	d103      	bne.n	800339a <_printf_common+0xba>
 8003392:	f04f 30ff 	mov.w	r0, #4294967295
 8003396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800339a:	3501      	adds	r5, #1
 800339c:	e7c3      	b.n	8003326 <_printf_common+0x46>
 800339e:	18e1      	adds	r1, r4, r3
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	2030      	movs	r0, #48	; 0x30
 80033a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033a8:	4422      	add	r2, r4
 80033aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033b2:	3302      	adds	r3, #2
 80033b4:	e7c5      	b.n	8003342 <_printf_common+0x62>
 80033b6:	2301      	movs	r3, #1
 80033b8:	4622      	mov	r2, r4
 80033ba:	4639      	mov	r1, r7
 80033bc:	4630      	mov	r0, r6
 80033be:	47c0      	blx	r8
 80033c0:	3001      	adds	r0, #1
 80033c2:	d0e6      	beq.n	8003392 <_printf_common+0xb2>
 80033c4:	f109 0901 	add.w	r9, r9, #1
 80033c8:	e7d8      	b.n	800337c <_printf_common+0x9c>
	...

080033cc <_printf_i>:
 80033cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80033d4:	460c      	mov	r4, r1
 80033d6:	7e09      	ldrb	r1, [r1, #24]
 80033d8:	b085      	sub	sp, #20
 80033da:	296e      	cmp	r1, #110	; 0x6e
 80033dc:	4617      	mov	r7, r2
 80033de:	4606      	mov	r6, r0
 80033e0:	4698      	mov	r8, r3
 80033e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80033e4:	f000 80b3 	beq.w	800354e <_printf_i+0x182>
 80033e8:	d822      	bhi.n	8003430 <_printf_i+0x64>
 80033ea:	2963      	cmp	r1, #99	; 0x63
 80033ec:	d036      	beq.n	800345c <_printf_i+0x90>
 80033ee:	d80a      	bhi.n	8003406 <_printf_i+0x3a>
 80033f0:	2900      	cmp	r1, #0
 80033f2:	f000 80b9 	beq.w	8003568 <_printf_i+0x19c>
 80033f6:	2958      	cmp	r1, #88	; 0x58
 80033f8:	f000 8083 	beq.w	8003502 <_printf_i+0x136>
 80033fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003400:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003404:	e032      	b.n	800346c <_printf_i+0xa0>
 8003406:	2964      	cmp	r1, #100	; 0x64
 8003408:	d001      	beq.n	800340e <_printf_i+0x42>
 800340a:	2969      	cmp	r1, #105	; 0x69
 800340c:	d1f6      	bne.n	80033fc <_printf_i+0x30>
 800340e:	6820      	ldr	r0, [r4, #0]
 8003410:	6813      	ldr	r3, [r2, #0]
 8003412:	0605      	lsls	r5, r0, #24
 8003414:	f103 0104 	add.w	r1, r3, #4
 8003418:	d52a      	bpl.n	8003470 <_printf_i+0xa4>
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6011      	str	r1, [r2, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	da03      	bge.n	800342a <_printf_i+0x5e>
 8003422:	222d      	movs	r2, #45	; 0x2d
 8003424:	425b      	negs	r3, r3
 8003426:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800342a:	486f      	ldr	r0, [pc, #444]	; (80035e8 <_printf_i+0x21c>)
 800342c:	220a      	movs	r2, #10
 800342e:	e039      	b.n	80034a4 <_printf_i+0xd8>
 8003430:	2973      	cmp	r1, #115	; 0x73
 8003432:	f000 809d 	beq.w	8003570 <_printf_i+0x1a4>
 8003436:	d808      	bhi.n	800344a <_printf_i+0x7e>
 8003438:	296f      	cmp	r1, #111	; 0x6f
 800343a:	d020      	beq.n	800347e <_printf_i+0xb2>
 800343c:	2970      	cmp	r1, #112	; 0x70
 800343e:	d1dd      	bne.n	80033fc <_printf_i+0x30>
 8003440:	6823      	ldr	r3, [r4, #0]
 8003442:	f043 0320 	orr.w	r3, r3, #32
 8003446:	6023      	str	r3, [r4, #0]
 8003448:	e003      	b.n	8003452 <_printf_i+0x86>
 800344a:	2975      	cmp	r1, #117	; 0x75
 800344c:	d017      	beq.n	800347e <_printf_i+0xb2>
 800344e:	2978      	cmp	r1, #120	; 0x78
 8003450:	d1d4      	bne.n	80033fc <_printf_i+0x30>
 8003452:	2378      	movs	r3, #120	; 0x78
 8003454:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003458:	4864      	ldr	r0, [pc, #400]	; (80035ec <_printf_i+0x220>)
 800345a:	e055      	b.n	8003508 <_printf_i+0x13c>
 800345c:	6813      	ldr	r3, [r2, #0]
 800345e:	1d19      	adds	r1, r3, #4
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6011      	str	r1, [r2, #0]
 8003464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003468:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800346c:	2301      	movs	r3, #1
 800346e:	e08c      	b.n	800358a <_printf_i+0x1be>
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6011      	str	r1, [r2, #0]
 8003474:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003478:	bf18      	it	ne
 800347a:	b21b      	sxthne	r3, r3
 800347c:	e7cf      	b.n	800341e <_printf_i+0x52>
 800347e:	6813      	ldr	r3, [r2, #0]
 8003480:	6825      	ldr	r5, [r4, #0]
 8003482:	1d18      	adds	r0, r3, #4
 8003484:	6010      	str	r0, [r2, #0]
 8003486:	0628      	lsls	r0, r5, #24
 8003488:	d501      	bpl.n	800348e <_printf_i+0xc2>
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	e002      	b.n	8003494 <_printf_i+0xc8>
 800348e:	0668      	lsls	r0, r5, #25
 8003490:	d5fb      	bpl.n	800348a <_printf_i+0xbe>
 8003492:	881b      	ldrh	r3, [r3, #0]
 8003494:	4854      	ldr	r0, [pc, #336]	; (80035e8 <_printf_i+0x21c>)
 8003496:	296f      	cmp	r1, #111	; 0x6f
 8003498:	bf14      	ite	ne
 800349a:	220a      	movne	r2, #10
 800349c:	2208      	moveq	r2, #8
 800349e:	2100      	movs	r1, #0
 80034a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034a4:	6865      	ldr	r5, [r4, #4]
 80034a6:	60a5      	str	r5, [r4, #8]
 80034a8:	2d00      	cmp	r5, #0
 80034aa:	f2c0 8095 	blt.w	80035d8 <_printf_i+0x20c>
 80034ae:	6821      	ldr	r1, [r4, #0]
 80034b0:	f021 0104 	bic.w	r1, r1, #4
 80034b4:	6021      	str	r1, [r4, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d13d      	bne.n	8003536 <_printf_i+0x16a>
 80034ba:	2d00      	cmp	r5, #0
 80034bc:	f040 808e 	bne.w	80035dc <_printf_i+0x210>
 80034c0:	4665      	mov	r5, ip
 80034c2:	2a08      	cmp	r2, #8
 80034c4:	d10b      	bne.n	80034de <_printf_i+0x112>
 80034c6:	6823      	ldr	r3, [r4, #0]
 80034c8:	07db      	lsls	r3, r3, #31
 80034ca:	d508      	bpl.n	80034de <_printf_i+0x112>
 80034cc:	6923      	ldr	r3, [r4, #16]
 80034ce:	6862      	ldr	r2, [r4, #4]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	bfde      	ittt	le
 80034d4:	2330      	movle	r3, #48	; 0x30
 80034d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80034de:	ebac 0305 	sub.w	r3, ip, r5
 80034e2:	6123      	str	r3, [r4, #16]
 80034e4:	f8cd 8000 	str.w	r8, [sp]
 80034e8:	463b      	mov	r3, r7
 80034ea:	aa03      	add	r2, sp, #12
 80034ec:	4621      	mov	r1, r4
 80034ee:	4630      	mov	r0, r6
 80034f0:	f7ff fef6 	bl	80032e0 <_printf_common>
 80034f4:	3001      	adds	r0, #1
 80034f6:	d14d      	bne.n	8003594 <_printf_i+0x1c8>
 80034f8:	f04f 30ff 	mov.w	r0, #4294967295
 80034fc:	b005      	add	sp, #20
 80034fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003502:	4839      	ldr	r0, [pc, #228]	; (80035e8 <_printf_i+0x21c>)
 8003504:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003508:	6813      	ldr	r3, [r2, #0]
 800350a:	6821      	ldr	r1, [r4, #0]
 800350c:	1d1d      	adds	r5, r3, #4
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6015      	str	r5, [r2, #0]
 8003512:	060a      	lsls	r2, r1, #24
 8003514:	d50b      	bpl.n	800352e <_printf_i+0x162>
 8003516:	07ca      	lsls	r2, r1, #31
 8003518:	bf44      	itt	mi
 800351a:	f041 0120 	orrmi.w	r1, r1, #32
 800351e:	6021      	strmi	r1, [r4, #0]
 8003520:	b91b      	cbnz	r3, 800352a <_printf_i+0x15e>
 8003522:	6822      	ldr	r2, [r4, #0]
 8003524:	f022 0220 	bic.w	r2, r2, #32
 8003528:	6022      	str	r2, [r4, #0]
 800352a:	2210      	movs	r2, #16
 800352c:	e7b7      	b.n	800349e <_printf_i+0xd2>
 800352e:	064d      	lsls	r5, r1, #25
 8003530:	bf48      	it	mi
 8003532:	b29b      	uxthmi	r3, r3
 8003534:	e7ef      	b.n	8003516 <_printf_i+0x14a>
 8003536:	4665      	mov	r5, ip
 8003538:	fbb3 f1f2 	udiv	r1, r3, r2
 800353c:	fb02 3311 	mls	r3, r2, r1, r3
 8003540:	5cc3      	ldrb	r3, [r0, r3]
 8003542:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003546:	460b      	mov	r3, r1
 8003548:	2900      	cmp	r1, #0
 800354a:	d1f5      	bne.n	8003538 <_printf_i+0x16c>
 800354c:	e7b9      	b.n	80034c2 <_printf_i+0xf6>
 800354e:	6813      	ldr	r3, [r2, #0]
 8003550:	6825      	ldr	r5, [r4, #0]
 8003552:	6961      	ldr	r1, [r4, #20]
 8003554:	1d18      	adds	r0, r3, #4
 8003556:	6010      	str	r0, [r2, #0]
 8003558:	0628      	lsls	r0, r5, #24
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	d501      	bpl.n	8003562 <_printf_i+0x196>
 800355e:	6019      	str	r1, [r3, #0]
 8003560:	e002      	b.n	8003568 <_printf_i+0x19c>
 8003562:	066a      	lsls	r2, r5, #25
 8003564:	d5fb      	bpl.n	800355e <_printf_i+0x192>
 8003566:	8019      	strh	r1, [r3, #0]
 8003568:	2300      	movs	r3, #0
 800356a:	6123      	str	r3, [r4, #16]
 800356c:	4665      	mov	r5, ip
 800356e:	e7b9      	b.n	80034e4 <_printf_i+0x118>
 8003570:	6813      	ldr	r3, [r2, #0]
 8003572:	1d19      	adds	r1, r3, #4
 8003574:	6011      	str	r1, [r2, #0]
 8003576:	681d      	ldr	r5, [r3, #0]
 8003578:	6862      	ldr	r2, [r4, #4]
 800357a:	2100      	movs	r1, #0
 800357c:	4628      	mov	r0, r5
 800357e:	f7fc fe3f 	bl	8000200 <memchr>
 8003582:	b108      	cbz	r0, 8003588 <_printf_i+0x1bc>
 8003584:	1b40      	subs	r0, r0, r5
 8003586:	6060      	str	r0, [r4, #4]
 8003588:	6863      	ldr	r3, [r4, #4]
 800358a:	6123      	str	r3, [r4, #16]
 800358c:	2300      	movs	r3, #0
 800358e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003592:	e7a7      	b.n	80034e4 <_printf_i+0x118>
 8003594:	6923      	ldr	r3, [r4, #16]
 8003596:	462a      	mov	r2, r5
 8003598:	4639      	mov	r1, r7
 800359a:	4630      	mov	r0, r6
 800359c:	47c0      	blx	r8
 800359e:	3001      	adds	r0, #1
 80035a0:	d0aa      	beq.n	80034f8 <_printf_i+0x12c>
 80035a2:	6823      	ldr	r3, [r4, #0]
 80035a4:	079b      	lsls	r3, r3, #30
 80035a6:	d413      	bmi.n	80035d0 <_printf_i+0x204>
 80035a8:	68e0      	ldr	r0, [r4, #12]
 80035aa:	9b03      	ldr	r3, [sp, #12]
 80035ac:	4298      	cmp	r0, r3
 80035ae:	bfb8      	it	lt
 80035b0:	4618      	movlt	r0, r3
 80035b2:	e7a3      	b.n	80034fc <_printf_i+0x130>
 80035b4:	2301      	movs	r3, #1
 80035b6:	464a      	mov	r2, r9
 80035b8:	4639      	mov	r1, r7
 80035ba:	4630      	mov	r0, r6
 80035bc:	47c0      	blx	r8
 80035be:	3001      	adds	r0, #1
 80035c0:	d09a      	beq.n	80034f8 <_printf_i+0x12c>
 80035c2:	3501      	adds	r5, #1
 80035c4:	68e3      	ldr	r3, [r4, #12]
 80035c6:	9a03      	ldr	r2, [sp, #12]
 80035c8:	1a9b      	subs	r3, r3, r2
 80035ca:	42ab      	cmp	r3, r5
 80035cc:	dcf2      	bgt.n	80035b4 <_printf_i+0x1e8>
 80035ce:	e7eb      	b.n	80035a8 <_printf_i+0x1dc>
 80035d0:	2500      	movs	r5, #0
 80035d2:	f104 0919 	add.w	r9, r4, #25
 80035d6:	e7f5      	b.n	80035c4 <_printf_i+0x1f8>
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1ac      	bne.n	8003536 <_printf_i+0x16a>
 80035dc:	7803      	ldrb	r3, [r0, #0]
 80035de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035e6:	e76c      	b.n	80034c2 <_printf_i+0xf6>
 80035e8:	080039dd 	.word	0x080039dd
 80035ec:	080039ee 	.word	0x080039ee

080035f0 <memcpy>:
 80035f0:	b510      	push	{r4, lr}
 80035f2:	1e43      	subs	r3, r0, #1
 80035f4:	440a      	add	r2, r1
 80035f6:	4291      	cmp	r1, r2
 80035f8:	d100      	bne.n	80035fc <memcpy+0xc>
 80035fa:	bd10      	pop	{r4, pc}
 80035fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003600:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003604:	e7f7      	b.n	80035f6 <memcpy+0x6>

08003606 <memmove>:
 8003606:	4288      	cmp	r0, r1
 8003608:	b510      	push	{r4, lr}
 800360a:	eb01 0302 	add.w	r3, r1, r2
 800360e:	d807      	bhi.n	8003620 <memmove+0x1a>
 8003610:	1e42      	subs	r2, r0, #1
 8003612:	4299      	cmp	r1, r3
 8003614:	d00a      	beq.n	800362c <memmove+0x26>
 8003616:	f811 4b01 	ldrb.w	r4, [r1], #1
 800361a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800361e:	e7f8      	b.n	8003612 <memmove+0xc>
 8003620:	4283      	cmp	r3, r0
 8003622:	d9f5      	bls.n	8003610 <memmove+0xa>
 8003624:	1881      	adds	r1, r0, r2
 8003626:	1ad2      	subs	r2, r2, r3
 8003628:	42d3      	cmn	r3, r2
 800362a:	d100      	bne.n	800362e <memmove+0x28>
 800362c:	bd10      	pop	{r4, pc}
 800362e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003632:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003636:	e7f7      	b.n	8003628 <memmove+0x22>

08003638 <_free_r>:
 8003638:	b538      	push	{r3, r4, r5, lr}
 800363a:	4605      	mov	r5, r0
 800363c:	2900      	cmp	r1, #0
 800363e:	d045      	beq.n	80036cc <_free_r+0x94>
 8003640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003644:	1f0c      	subs	r4, r1, #4
 8003646:	2b00      	cmp	r3, #0
 8003648:	bfb8      	it	lt
 800364a:	18e4      	addlt	r4, r4, r3
 800364c:	f000 f8d2 	bl	80037f4 <__malloc_lock>
 8003650:	4a1f      	ldr	r2, [pc, #124]	; (80036d0 <_free_r+0x98>)
 8003652:	6813      	ldr	r3, [r2, #0]
 8003654:	4610      	mov	r0, r2
 8003656:	b933      	cbnz	r3, 8003666 <_free_r+0x2e>
 8003658:	6063      	str	r3, [r4, #4]
 800365a:	6014      	str	r4, [r2, #0]
 800365c:	4628      	mov	r0, r5
 800365e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003662:	f000 b8c8 	b.w	80037f6 <__malloc_unlock>
 8003666:	42a3      	cmp	r3, r4
 8003668:	d90c      	bls.n	8003684 <_free_r+0x4c>
 800366a:	6821      	ldr	r1, [r4, #0]
 800366c:	1862      	adds	r2, r4, r1
 800366e:	4293      	cmp	r3, r2
 8003670:	bf04      	itt	eq
 8003672:	681a      	ldreq	r2, [r3, #0]
 8003674:	685b      	ldreq	r3, [r3, #4]
 8003676:	6063      	str	r3, [r4, #4]
 8003678:	bf04      	itt	eq
 800367a:	1852      	addeq	r2, r2, r1
 800367c:	6022      	streq	r2, [r4, #0]
 800367e:	6004      	str	r4, [r0, #0]
 8003680:	e7ec      	b.n	800365c <_free_r+0x24>
 8003682:	4613      	mov	r3, r2
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	b10a      	cbz	r2, 800368c <_free_r+0x54>
 8003688:	42a2      	cmp	r2, r4
 800368a:	d9fa      	bls.n	8003682 <_free_r+0x4a>
 800368c:	6819      	ldr	r1, [r3, #0]
 800368e:	1858      	adds	r0, r3, r1
 8003690:	42a0      	cmp	r0, r4
 8003692:	d10b      	bne.n	80036ac <_free_r+0x74>
 8003694:	6820      	ldr	r0, [r4, #0]
 8003696:	4401      	add	r1, r0
 8003698:	1858      	adds	r0, r3, r1
 800369a:	4282      	cmp	r2, r0
 800369c:	6019      	str	r1, [r3, #0]
 800369e:	d1dd      	bne.n	800365c <_free_r+0x24>
 80036a0:	6810      	ldr	r0, [r2, #0]
 80036a2:	6852      	ldr	r2, [r2, #4]
 80036a4:	605a      	str	r2, [r3, #4]
 80036a6:	4401      	add	r1, r0
 80036a8:	6019      	str	r1, [r3, #0]
 80036aa:	e7d7      	b.n	800365c <_free_r+0x24>
 80036ac:	d902      	bls.n	80036b4 <_free_r+0x7c>
 80036ae:	230c      	movs	r3, #12
 80036b0:	602b      	str	r3, [r5, #0]
 80036b2:	e7d3      	b.n	800365c <_free_r+0x24>
 80036b4:	6820      	ldr	r0, [r4, #0]
 80036b6:	1821      	adds	r1, r4, r0
 80036b8:	428a      	cmp	r2, r1
 80036ba:	bf04      	itt	eq
 80036bc:	6811      	ldreq	r1, [r2, #0]
 80036be:	6852      	ldreq	r2, [r2, #4]
 80036c0:	6062      	str	r2, [r4, #4]
 80036c2:	bf04      	itt	eq
 80036c4:	1809      	addeq	r1, r1, r0
 80036c6:	6021      	streq	r1, [r4, #0]
 80036c8:	605c      	str	r4, [r3, #4]
 80036ca:	e7c7      	b.n	800365c <_free_r+0x24>
 80036cc:	bd38      	pop	{r3, r4, r5, pc}
 80036ce:	bf00      	nop
 80036d0:	200000b4 	.word	0x200000b4

080036d4 <_malloc_r>:
 80036d4:	b570      	push	{r4, r5, r6, lr}
 80036d6:	1ccd      	adds	r5, r1, #3
 80036d8:	f025 0503 	bic.w	r5, r5, #3
 80036dc:	3508      	adds	r5, #8
 80036de:	2d0c      	cmp	r5, #12
 80036e0:	bf38      	it	cc
 80036e2:	250c      	movcc	r5, #12
 80036e4:	2d00      	cmp	r5, #0
 80036e6:	4606      	mov	r6, r0
 80036e8:	db01      	blt.n	80036ee <_malloc_r+0x1a>
 80036ea:	42a9      	cmp	r1, r5
 80036ec:	d903      	bls.n	80036f6 <_malloc_r+0x22>
 80036ee:	230c      	movs	r3, #12
 80036f0:	6033      	str	r3, [r6, #0]
 80036f2:	2000      	movs	r0, #0
 80036f4:	bd70      	pop	{r4, r5, r6, pc}
 80036f6:	f000 f87d 	bl	80037f4 <__malloc_lock>
 80036fa:	4a21      	ldr	r2, [pc, #132]	; (8003780 <_malloc_r+0xac>)
 80036fc:	6814      	ldr	r4, [r2, #0]
 80036fe:	4621      	mov	r1, r4
 8003700:	b991      	cbnz	r1, 8003728 <_malloc_r+0x54>
 8003702:	4c20      	ldr	r4, [pc, #128]	; (8003784 <_malloc_r+0xb0>)
 8003704:	6823      	ldr	r3, [r4, #0]
 8003706:	b91b      	cbnz	r3, 8003710 <_malloc_r+0x3c>
 8003708:	4630      	mov	r0, r6
 800370a:	f000 f863 	bl	80037d4 <_sbrk_r>
 800370e:	6020      	str	r0, [r4, #0]
 8003710:	4629      	mov	r1, r5
 8003712:	4630      	mov	r0, r6
 8003714:	f000 f85e 	bl	80037d4 <_sbrk_r>
 8003718:	1c43      	adds	r3, r0, #1
 800371a:	d124      	bne.n	8003766 <_malloc_r+0x92>
 800371c:	230c      	movs	r3, #12
 800371e:	6033      	str	r3, [r6, #0]
 8003720:	4630      	mov	r0, r6
 8003722:	f000 f868 	bl	80037f6 <__malloc_unlock>
 8003726:	e7e4      	b.n	80036f2 <_malloc_r+0x1e>
 8003728:	680b      	ldr	r3, [r1, #0]
 800372a:	1b5b      	subs	r3, r3, r5
 800372c:	d418      	bmi.n	8003760 <_malloc_r+0x8c>
 800372e:	2b0b      	cmp	r3, #11
 8003730:	d90f      	bls.n	8003752 <_malloc_r+0x7e>
 8003732:	600b      	str	r3, [r1, #0]
 8003734:	50cd      	str	r5, [r1, r3]
 8003736:	18cc      	adds	r4, r1, r3
 8003738:	4630      	mov	r0, r6
 800373a:	f000 f85c 	bl	80037f6 <__malloc_unlock>
 800373e:	f104 000b 	add.w	r0, r4, #11
 8003742:	1d23      	adds	r3, r4, #4
 8003744:	f020 0007 	bic.w	r0, r0, #7
 8003748:	1ac3      	subs	r3, r0, r3
 800374a:	d0d3      	beq.n	80036f4 <_malloc_r+0x20>
 800374c:	425a      	negs	r2, r3
 800374e:	50e2      	str	r2, [r4, r3]
 8003750:	e7d0      	b.n	80036f4 <_malloc_r+0x20>
 8003752:	428c      	cmp	r4, r1
 8003754:	684b      	ldr	r3, [r1, #4]
 8003756:	bf16      	itet	ne
 8003758:	6063      	strne	r3, [r4, #4]
 800375a:	6013      	streq	r3, [r2, #0]
 800375c:	460c      	movne	r4, r1
 800375e:	e7eb      	b.n	8003738 <_malloc_r+0x64>
 8003760:	460c      	mov	r4, r1
 8003762:	6849      	ldr	r1, [r1, #4]
 8003764:	e7cc      	b.n	8003700 <_malloc_r+0x2c>
 8003766:	1cc4      	adds	r4, r0, #3
 8003768:	f024 0403 	bic.w	r4, r4, #3
 800376c:	42a0      	cmp	r0, r4
 800376e:	d005      	beq.n	800377c <_malloc_r+0xa8>
 8003770:	1a21      	subs	r1, r4, r0
 8003772:	4630      	mov	r0, r6
 8003774:	f000 f82e 	bl	80037d4 <_sbrk_r>
 8003778:	3001      	adds	r0, #1
 800377a:	d0cf      	beq.n	800371c <_malloc_r+0x48>
 800377c:	6025      	str	r5, [r4, #0]
 800377e:	e7db      	b.n	8003738 <_malloc_r+0x64>
 8003780:	200000b4 	.word	0x200000b4
 8003784:	200000b8 	.word	0x200000b8

08003788 <_realloc_r>:
 8003788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800378a:	4607      	mov	r7, r0
 800378c:	4614      	mov	r4, r2
 800378e:	460e      	mov	r6, r1
 8003790:	b921      	cbnz	r1, 800379c <_realloc_r+0x14>
 8003792:	4611      	mov	r1, r2
 8003794:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003798:	f7ff bf9c 	b.w	80036d4 <_malloc_r>
 800379c:	b922      	cbnz	r2, 80037a8 <_realloc_r+0x20>
 800379e:	f7ff ff4b 	bl	8003638 <_free_r>
 80037a2:	4625      	mov	r5, r4
 80037a4:	4628      	mov	r0, r5
 80037a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037a8:	f000 f826 	bl	80037f8 <_malloc_usable_size_r>
 80037ac:	42a0      	cmp	r0, r4
 80037ae:	d20f      	bcs.n	80037d0 <_realloc_r+0x48>
 80037b0:	4621      	mov	r1, r4
 80037b2:	4638      	mov	r0, r7
 80037b4:	f7ff ff8e 	bl	80036d4 <_malloc_r>
 80037b8:	4605      	mov	r5, r0
 80037ba:	2800      	cmp	r0, #0
 80037bc:	d0f2      	beq.n	80037a4 <_realloc_r+0x1c>
 80037be:	4631      	mov	r1, r6
 80037c0:	4622      	mov	r2, r4
 80037c2:	f7ff ff15 	bl	80035f0 <memcpy>
 80037c6:	4631      	mov	r1, r6
 80037c8:	4638      	mov	r0, r7
 80037ca:	f7ff ff35 	bl	8003638 <_free_r>
 80037ce:	e7e9      	b.n	80037a4 <_realloc_r+0x1c>
 80037d0:	4635      	mov	r5, r6
 80037d2:	e7e7      	b.n	80037a4 <_realloc_r+0x1c>

080037d4 <_sbrk_r>:
 80037d4:	b538      	push	{r3, r4, r5, lr}
 80037d6:	4c06      	ldr	r4, [pc, #24]	; (80037f0 <_sbrk_r+0x1c>)
 80037d8:	2300      	movs	r3, #0
 80037da:	4605      	mov	r5, r0
 80037dc:	4608      	mov	r0, r1
 80037de:	6023      	str	r3, [r4, #0]
 80037e0:	f7fd fb24 	bl	8000e2c <_sbrk>
 80037e4:	1c43      	adds	r3, r0, #1
 80037e6:	d102      	bne.n	80037ee <_sbrk_r+0x1a>
 80037e8:	6823      	ldr	r3, [r4, #0]
 80037ea:	b103      	cbz	r3, 80037ee <_sbrk_r+0x1a>
 80037ec:	602b      	str	r3, [r5, #0]
 80037ee:	bd38      	pop	{r3, r4, r5, pc}
 80037f0:	20002878 	.word	0x20002878

080037f4 <__malloc_lock>:
 80037f4:	4770      	bx	lr

080037f6 <__malloc_unlock>:
 80037f6:	4770      	bx	lr

080037f8 <_malloc_usable_size_r>:
 80037f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037fc:	1f18      	subs	r0, r3, #4
 80037fe:	2b00      	cmp	r3, #0
 8003800:	bfbc      	itt	lt
 8003802:	580b      	ldrlt	r3, [r1, r0]
 8003804:	18c0      	addlt	r0, r0, r3
 8003806:	4770      	bx	lr

08003808 <_init>:
 8003808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380a:	bf00      	nop
 800380c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800380e:	bc08      	pop	{r3}
 8003810:	469e      	mov	lr, r3
 8003812:	4770      	bx	lr

08003814 <_fini>:
 8003814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003816:	bf00      	nop
 8003818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800381a:	bc08      	pop	{r3}
 800381c:	469e      	mov	lr, r3
 800381e:	4770      	bx	lr
